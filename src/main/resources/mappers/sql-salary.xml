<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="salary">

	<cache />

	<!--
	급여 관리 
	 -->
	<sql id="paymentList">

		SELECT ROW_NUMBER() OVER(ORDER BY C.CONTRACT_ID , TO_CHAR(R.RESULT_DATE , 'MM-DD')  ,R.UPDATE_DATE , P.PAYMENT_ID) RN
		,C.CONTRACT_ID 
		,COUNT(DISTINCT C.CONTRACT_ID) OVER (PARTITION BY U.USER_ID) AS CONTRACT_COUNT
		,R.RESULT_ID 
		,R.UPDATE_DATE 
		,U.USER_ID 
		,U.USER_NM 
		,C.BUYER_ID
		,(SELECT BUYER_NM FROM TBL_EXP_BUYER WHERE BUYER_ID = C.BUYER_ID) AS BUYER_NM
		,CST.CONSULTING_ID
		,CST.CONSULTING_NM 
		,C.TOTAL_COST 
		,R.INCOME 
		,TO_CHAR(R.RESULT_DATE , 'MM-DD') 		AS RESULT_DATE
		,TO_CHAR(R.RESULT_DATE , 'YYYY-MM') 	AS RESULT_DATE_MONTH
		,P.RELATION_TYPE 
		,GET_CODE_NM('RELATION_TYPE',P.RELATION_TYPE) AS RELATION_TYPE_NM
		,CASE 	WHEN P.RELATION_TYPE = 'COWORK' 
				THEN 
					(EXEC_P.RATE * (P.RATE/100)) || '%'
				ELSE P.RATE || '%' 
		 END AS RATE
		,ROUND(P.PAYMENT) 						AS PAYMENT
		,ROUND(P.PAYMENT * 0.033) 				AS TAX
		,ROUND(P.PAYMENT - P.PAYMENT * 0.033)   AS REAL_PAY
		,P.PAYMENT_ID
		FROM TBL_EXP_PAYMENT P 
		,TBL_EXP_USER U 
		,TBL_EXP_CONTRACT C
		,TBL_EXP_RESULT R
		,TBL_EXP_CONSULTING CST
		,TBL_EXP_PAYMENT EXEC_P
		WHERE U.USER_ID = P.USER_ID 
		<if test=" USER_ID != null and !USER_ID.equals('')">
		AND P.USER_ID		= #{USER_ID}
		</if>
		AND P.CONTRACT_ID	= R.CONTRACT_ID 
		AND P.RESULT_ID		= R.RESULT_ID 
		AND C.CONSULTING_ID	= CST.CONSULTING_ID
		AND C.USE_YN ='Y'	AND C.DEL_YN ='N' 
		AND R.USE_YN ='Y'	AND R.DEL_YN ='N' 
		AND P.USE_YN ='Y'	AND P.DEL_YN ='N'
		AND C.CONTRACT_ID 	= R.CONTRACT_ID
		<if test=" RESULT_DATE != null and !RESULT_DATE.equals('')">
		AND R.RESULT_DATE <![CDATA[ >= ]]> TO_DATE(#{RESULT_DATE},'YYYY-MM-DD')
		AND R.RESULT_DATE <![CDATA[ <  ]]> ADD_MONTHS(TO_DATE(#{RESULT_DATE},'YYYY-MM-DD'), 1)
		</if>
		<if test=" CONSULTING_IDS!= null and !CONSULTING_IDS.equals('')">
			AND C.CONSULTING_ID	IN 
			<foreach item="CONSULTING_ID" collection="CONSULTING_IDS" open="(" close=")" separator=",">
				#{CONSULTING_ID}		
			</foreach>	
		</if>
		<if test=" BUYER_IDS != null and !BUYER_IDS.equals('')">
			AND C.BUYER_ID	IN 
			<foreach item="BUYER_ID" collection="BUYER_IDS" open="(" close=")" separator=",">
				#{BUYER_ID}		
			</foreach>	
		</if>
		<if test=" RELATION_TYPES != null and !RELATION_TYPES.equals('')">
			AND P.RELATION_TYPE	IN 
			<foreach item="RELATION_TYPE" collection="RELATION_TYPES" open="(" close=")" separator=",">
				#{RELATION_TYPE}		
			</foreach>	
		</if>
		AND EXEC_P.CONTRACT_ID(+)	= R.CONTRACT_ID 
		AND EXEC_P.RELATION_TYPE(+) = P.RELATION_TYPE
		AND EXEC_P.RESULT_ID(+)		= R.RESULT_ID 
		<!-- AND EXEC_P.EXEC_TYPE(+) 	= 'EXEC' -->
		AND EXEC_P.USE_YN(+) 		='Y'	
		AND EXEC_P.DEL_YN(+) 		='N'
		AND P.PAYMENT IS NOT NULL
		ORDER BY C.CONTRACT_ID , TO_CHAR(R.RESULT_DATE , 'MM-DD')  ,R.UPDATE_DATE , P.PAYMENT_ID
	</sql>
		
	<select id="getPaymentList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	salary.getPaymentList
			급여 리스트 조회 
		*/
		<include refid="paymentList"/>

	</select>

	<select id="getPaymentCntList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	salary.getPaymentCntList
			급여 내역 리스트 조회 
		*/
		SELECT ROW_NUMBER() OVER(ORDER BY USER_NM) RN
		,SUBSTR(RESULT_DATE_MONTH,0,4)||'년 '||SUBSTR(RESULT_DATE_MONTH,6)||'월' AS CALC_PAY_DATE
		,USER_ID 
		,USER_NM
		,CONTRACT_COUNT CNT
		,SUM(PAYMENT) AS TOTAL_PAYMENT
 		FROM(
		<include refid="paymentList"/>
		)
		GROUP BY RESULT_DATE_MONTH, USER_ID, USER_NM,CONTRACT_COUNT
	</select>

	<select id="getPaymentDetailList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	salary.getPaymentDetailList
			급여 상세 리스트 조회 
		*/
		<include refid="paymentList"/>

	</select>

    <insert id="insertEtcPayment" parameterType="map" >
        /* salary.insertEtcPayment */
        INSERT INTO TBL_EXP_PAYMENT_ETC (
        	 PAYMENT_ETC_ID
             ,ADD_DATE_MONTH     
             ,USER_ID           
             ,BUYER_ID 
             ,BUYER_NM
             ,PAYMENT_NM
             ,PAYMENT
        )
        VALUES(
              #{PAYMENT_ETC_ID}
             ,#{ADD_DATE_MONTH}
             ,#{USER_ID}
             ,#{BUYER_ID}
             ,#{BUYER_NM}
             ,#{PAYMENT_NM}
             ,#{PAYMENT}
        ) 
    </insert>
    
	<update id="updateEtcPayment" parameterType="java.util.HashMap"  flushCache="true" >
 		/* salary.updateEtcPayment */
		MERGE INTO TBL_EXP_PAYMENT_ETC T
		USING (
		  SELECT #{PAYMENT_ETC_ID} 	AS PAYMENT_ETC_ID,
		         #{ADD_DATE_MONTH} 	AS ADD_DATE_MONTH,
		         #{USER_ID} 	AS USER_ID,
		         #{BUYER_ID} 	AS BUYER_ID,
		         #{BUYER_NM} 	AS BUYER_NM,
		         #{PAYMENT_NM} 	AS PAYMENT_NM,
		         #{PAYMENT} 	AS PAYMENT
		  FROM dual
		) S
		ON (T.PAYMENT_ETC_ID	= S.PAYMENT_ETC_ID
		)
		WHEN MATCHED THEN
		  UPDATE SET
		    T.ADD_DATE_MONTH	= S.ADD_DATE_MONTH,
		    T.USER_ID 			= S.USER_ID,
		    T.BUYER_ID 			= S.BUYER_ID,
		    T.BUYER_NM 			= S.BUYER_NM,
		    T.PAYMENT_NM 		= S.PAYMENT_NM,
		    T.PAYMENT 			= S.PAYMENT
		WHEN NOT MATCHED THEN 
    		INSERT (  PAYMENT_ETC_ID,   ADD_DATE_MONTH,   USER_ID,   BUYER_ID,   BUYER_NM,   PAYMENT_NM,   PAYMENT)
   			VALUES (S.PAYMENT_ETC_ID, S.ADD_DATE_MONTH, S.USER_ID, S.BUYER_ID, S.BUYER_NM, S.PAYMENT_NM, S.PAYMENT)
	</update>

    
	<select id="getEtcPaymentDetailList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	salary.getEtcPaymentDetailList
			ETC 급여 상세 리스트 조회 
		*/
	 	SELECT 
	 		PAYMENT_ETC_ID
			,ADD_DATE_MONTH     
			,USER_ID           
			,BUYER_ID 
			,BUYER_NM
			,PAYMENT_NM
			,ROUND(P.PAYMENT) 						AS PAYMENT
			,ROUND(P.PAYMENT * 0.033) 				AS TAX
			,ROUND(P.PAYMENT - P.PAYMENT * 0.033)   AS REAL_PAY
	 	FROM TBL_EXP_PAYMENT_ETC P
	 	WHERE ADD_DATE_MONTH = #{RESULT_DATE_MONTH}
	 	AND USER_ID	= #{USER_ID}
	 	AND BUYER_ID = #{BUYER_ID}
	 	<if test=" PAYMENT_NM!= null and !PAYMENT_NM.equals('')">
	 	AND PAYMENT_NM = #{PAYMENT_NM}
	 	</if>
	 	ORDER BY PAYMENT_NM
	</select>

	<delete id="deleteEtcPayment" parameterType="java.util.HashMap"  flushCache="true" >
		/*	salary.deleteEtcPayment
			기타수수료 삭제
		*/
		DELETE FROM  TBL_EXP_PAYMENT_ETC
		WHERE PAYMENT_ETC_ID = #{PAYMENT_ETC_ID} 
	</delete>
	
</mapper>
