<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="hrInfo">

	<!--
	인사정보 관리 
	 -->	
	<sql id="getHrInfoList_body">
		SELECT ROW_NUMBER() OVER( ORDER BY CASE WHEN U.UPDATE_DATE > GET_KRDT(SYSDATE) - 1 THEN 0 ELSE 1 END , U.USER_ID) RN
			,U.SP_CSTM_ID
			,U.USER_ID
			,U.USER_NM
			,U.USER_DESC
            ,U.GENDER
            ,GET_CODE_NM('GENDER', U.GENDER)		AS GENDER_NM
			,U.E_MAIL
			,U.PHONE_NUM
            ,DIV.DEPTH1 AS BASE_BRANCH_ID
            ,DIV.DEPTH1 AS BASE_BRANCH_NM
            ,DIV.DEPTH2 AS SP_BRANCH_ID
            ,DIV.DEPTH2 AS SP_BRANCH_NM
            ,DIV.DEPTH3 AS BRANCH_ID
            ,DIV.DEPTH3 AS BRANCH_NM
            ,U.SALES_TYPE
			,NULL AS ROLE
			,'-'		AS ROLE_NM
			,U.POSITION
			,GET_CODE_NM('POSITION',U.POSITION ) POSITION_NM
			,U.GRADE
			,GET_CODE_NM('GRADE', U.GRADE)		AS GRADE_NM
			,U.STATE
			,GET_CODE_NM('USER_STATE', U.STATE)		AS STATE_NM
			,TO_CHAR( U.REG_DATE , 'YYYY-MM-DD' ) 	AS REG_DATE
			,U.JUMIN
			,U.POST_NUM
			,U.ADDR1
			,U.ADDR2
			,U.ADDR1 || ' ' || U.ADDR2  AS ADDR
			,U.UPDATE_USER
			,U.UPDATE_DATE
			,NVL(TO_CHAR( I.AMOUNT   , '999,999,999,999,999'),'0')	AS AMOUNT 
			,TO_CHAR( I.REG_DATE ,'YYYY-MM-DD'  ) 		AS INSURANCE_REG_DATE
			,TO_CHAR( I.EXP_DATE ,'YYYY-MM-DD'  ) 		AS INSURANCE_EXP_DATE
			,CASE 	WHEN I.EXP_DATE - GET_KRDT(SYSDATE) <![CDATA[ < ]]> 0 
					THEN 'OVER'
			        ELSE 'NOT'
			 END 													AS INSURANCE_EXP_DATE_OVER			
			,NVL(TO_CHAR( GHIS.MAX_UPGRADE_DATE,'YYYY-MM-DD'),'-')	AS UPGRADE_DATE
            ,U.SURETY_INSURANCE 
            ,NVL(GET_CODE_NM('G_SURETY_INSURANCE', U.SURETY_INSURANCE),'-') AS SURETY_INSURANCE_NM 
			, CASE 
				WHEN  ( SELECT COUNT(1) 
						FROM TBL_EXP_CONTRACT I 
						WHERE I.USER_ID = U.USER_ID 
						AND I.USE_YN ='Y' AND DEL_YN='N') 
						<![CDATA[ > ]]> 0 
				THEN 'N'
				ELSE 'Y'
			END AS CAN_DEL
			,USER_PW AS CURRENT_PWD
			,DECODE( USER_PW , '1234', 'Y', 'N' ) AS MUST_CHANGE
			,U.RECOMMENDER_ID
			,GET_USER_NM(U.RECOMMENDER_ID) AS RECOMMENDER_NM
			,AU.ROLE_ID
			,U.DIVISION_ID
			,NVL(U.PIC_NUM , 1 ) AS PIC_NUM
			,(SELECT FILE_ID FROM TBL_EXP_FILEMNG WHERE OWNER_CD = 'USER_FACE' AND DEL_YN= 'N' AND GRP_FILE_ID = U.USER_ID AND ROWNUM <![CDATA[ <= ]]> 1) USER_IMG_ID
		FROM TBL_EXP_USER U
		, TBL_EXP_SURETY_INSURANCE I
        , TBL_EXP_DIVISION DIV
        , (SELECT USER_ID,  MAX(UPGRADE_DATE) AS MAX_UPGRADE_DATE
        	FROM TBL_EXP_GRADE_HIST
        	WHERE GRADE LIKE '%MASTER%'
        	GROUP BY USER_ID
        ) GHIS
        ,TBL_EXP_AUTH AU
		WHERE 1=1
		AND U.USE_YN = 'Y' AND U.DEL_YN = 'N'
		AND U.SP_CSTM_ID = I.SP_CSTM_ID(+)
        AND U.USER_ID = I.USER_ID(+)
     	AND U.DIVISION_ID = DIV.DIVISION_ID(+) 
        AND U.USER_ID = GHIS.USER_ID(+)	
        AND U.USER_ID = AU.USER_ID(+)
        <choose>
       	<when test='parm.IS_MULTI_SEARCH == "N" '> 
        	<if test=" parm.USER_ID != null and !parm.USER_ID.equals('') ">
		    AND U.USER_ID like '%' || #{parm.USER_ID} || '%'  
        	</if>
			<if test=" parm.USER_NM != null and !parm.USER_NM.equals('') ">
		    AND U.USER_NM like '%' || #{parm.USER_NM} || '%' 
        	</if>
        	<if test=" parm.EMAIL != null and !parm.EMAIL.equals('') ">
		    AND U.E_MAIL like '%' || #{parm.EMAIL} || '%' 
        	</if>
        	<if test=" parm.PHONE_NUM != null and !parm.PHONE_NUM.equals('') ">
		    AND U.PHONE_NUM like '%' || #{parm.PHONE_NUM} || '%' 
        	</if>
		</when>	 
       	<when test='parm.IS_MULTI_SEARCH == "Y" '>  
	        AND (
        	<if test=" parm.USER_ID != null and !parm.USER_ID.equals('') ">
		        U.USER_ID like '%' || #{parm.USER_ID} || '%'
        	</if>
        	<if test=" parm.USER_NM != null and !parm.USER_NM.equals('') ">
        		<if test=" parm.USER_ID != null and !parm.USER_ID.equals('') ">
        		OR
        		</if>
		        U.USER_NM like '%' || #{parm.USER_NM} || '%'
        	</if>
        	<if test=" parm.EMAIL != null and !parm.EMAIL.equals('') ">
				<if test=" (parm.USER_ID != null and !parm.USER_ID.equals('') ) or ( parm.USER_NM != null and !parm.USER_NM.equals(''))">
        		OR
        		</if>
		        U.E_MAIL like '%' || #{parm.EMAIL} || '%'
        	</if>
        	<if test=" parm.PHONE_NUM != null and !parm.PHONE_NUM.equals('') ">
				<if test=" (parm.USER_ID != null and !parm.USER_ID.equals('') ) or ( parm.USER_NM != null and !parm.USER_NM.equals('')) or (parm.EMAIL != null and !parm.EMAIL.equals(''))">
        		OR
        		</if>
		        U.PHONE_NUM like '%' || #{parm.PHONE_NUM} || '%'   
        	</if> 
			<if test=" parm.USER_ID == '' and parm.USER_NM == '' and parm.EMAIL == '' and parm.PHONE_NUM == ''">
				1=1
			</if>        	
        	 )
        	 </when>
      	</choose>
	</sql>
	<select id="getHrInfoList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	hrInfo.getHrInfoList
			인사정보 리스트 조회 
		*/
		<include refid="getHrInfoList_body"/>
         ORDER BY CASE WHEN U.UPDATE_DATE > GET_KRDT(SYSDATE) - 1 THEN 0 ELSE 1 END , USER_ID
	</select>	
	<select id="getHrInfoList_totalCnt" resultType="Integer">
		/* hrInfo.getHrInfoList_totalCnt  */
		<include refid="common.totalWrapStart"/>
		<include refid="getHrInfoList_body"/>
		<include refid="common.totalWrapEnd"/>
	</select>
	<select id="getHrInfoList_paging" resultType="java.util.HashMap">
		/* hrInfo.getHrInfoList_paging  */
		<include refid="common.pagingWrapStart"/>
		<include refid="getHrInfoList_body"/>
        ORDER BY CASE WHEN U.UPDATE_DATE > GET_KRDT(SYSDATE) - 1 THEN 0 ELSE 1 END , USER_ID
		<include refid="common.pagingWrapEnd"/>
	</select>
		 	
	<update id="updateHrInfo" parameterType="java.util.HashMap"  flushCache="true" >
		/*	hrInfo.updateHrInfo
			인사정보  저장
		*/
		MERGE INTO TBL_EXP_USER T
		USING (
		  SELECT #{sessionVo.spCstmId}	AS SP_CSTM_ID,
		         #{USER_ID} 	AS USER_ID,
		         #{USER_NM} 	AS USER_NM,
		         #{USER_DESC} 	AS USER_DESC,
		         #{GENDER} 		AS GENDER,
		         #{E_MAIL} 		AS E_MAIL,
		         #{PHONE_NUM} 	AS PHONE_NUM,
				 #{POSITION}	AS POSITION,
		         #{GRADE}		AS GRADE,
		         NVL(#{STATE},'INUSE') AS STATE,
		         TO_DATE( #{REG_DATE}, 'YYYY-MM-DD' )	AS REG_DATE,
		         #{JUMIN}		AS JUMIN,
		         #{POST_NUM}	AS POST_NUM,
		         #{ADDR1}		AS ADDR1,
		         #{ADDR2}		AS ADDR2,
		        <choose>
			       	<when test="PIC_NUM != null and !PIC_NUM.equals('')"> 
					   #{PIC_NUM} AS PIC_NUM,
					</when>
			       	<when test="PIC_NUM == null or PIC_NUM.equals('')"> 
					   '1' AS PIC_NUM,
					</when>
				</choose>		         

		         'Y' 			AS USE_YN,
		         'N' 			AS DEL_YN,
		        <choose>
			       	<when test="RECOMMENDER_ID != null and !RECOMMENDER_ID.equals('')"> 
					   #{RECOMMENDER_ID} AS RECOMMENDER_ID,
					</when>
			       	<when test="RECOMMENDER_ID == null or RECOMMENDER_ID.equals('')"> 
					   NULL AS RECOMMENDER_ID,
					</when>
				</choose>		         
		         #{SALES_TYPE}	AS SALES_TYPE,
		         #{SURETY_INSURANCE} AS SURETY_INSURANCE,
		        <choose>
			       	<when test="DIVISION_ID != null and !DIVISION_ID.equals('')"> 
					   #{DIVISION_ID} AS DIVISION_ID,
					</when>
			       	<when test="DIVISION_ID == null or DIVISION_ID.equals('')"> 
					    NULL AS DIVISION_ID,
					</when>
				</choose>		         
		        #{sessionVo.userId}	AS UPDATE_USER,
		         GET_KRDT(SYSDATE) 		AS UPDATE_DATE
		  FROM dual
		) S
		ON (T.SP_CSTM_ID	= S.SP_CSTM_ID
		AND T.USER_ID 		= S.USER_ID
		)
		WHEN MATCHED THEN
		  UPDATE SET
		    T.USER_NM 		= S.USER_NM,
		    T.GENDER 		= S.GENDER,
		    T.USER_DESC 	= S.USER_DESC,
		    T.E_MAIL 		= S.E_MAIL,
		    T.PHONE_NUM 	= S.PHONE_NUM,
			T.POSITION		= S.POSITION,
		    T.GRADE 		= S.GRADE,
		    T.STATE 		= S.STATE,
		    T.REG_DATE 		= S.REG_DATE,
		    T.JUMIN 		= S.JUMIN,
		    T.POST_NUM 		= S.POST_NUM,
		    T.ADDR1 		= S.ADDR1,
		    T.ADDR2 		= S.ADDR2,
		    T.PIC_NUM		= S.PIC_NUM,
		    T.USE_YN 		= S.USE_YN,
		    T.DEL_YN 		= S.DEL_YN,
		    T.RECOMMENDER_ID= S.RECOMMENDER_ID,
		    T.SALES_TYPE 	= S.SALES_TYPE,
		    T.SURETY_INSURANCE = S.SURETY_INSURANCE,
		    T.DIVISION_ID	= S.DIVISION_ID,
		    T.UPDATE_USER 	= S.UPDATE_USER,
		    T.UPDATE_DATE 	= S.UPDATE_DATE
		WHEN NOT MATCHED THEN 
    		INSERT (SP_CSTM_ID, USER_ID, USER_NM, USER_DESC, E_MAIL, PHONE_NUM
    		, POSITION, GRADE, STATE, REG_DATE, JUMIN, POST_NUM, ADDR1, ADDR2, UPDATE_USER
    		, UPDATE_DATE, SURETY_INSURANCE, GENDER, SALES_TYPE, USE_YN, DEL_YN, USER_PW,RECOMMENDER_ID,DIVISION_ID,PIC_NUM)
   			VALUES (S.SP_CSTM_ID, S.USER_ID, S.USER_NM, S.USER_DESC, S.E_MAIL, S.PHONE_NUM
   			, S.POSITION, S.GRADE, S.STATE, S.REG_DATE, S.JUMIN, S.POST_NUM, S.ADDR1, S.ADDR2, S.UPDATE_USER
   			, S.UPDATE_DATE, S.SURETY_INSURANCE, S.GENDER, S.SALES_TYPE, S.USE_YN, S.DEL_YN, '1234',S.RECOMMENDER_ID,S.DIVISION_ID,S.PIC_NUM)
	</update>
	
	<update id="updateMyHrInfo" parameterType="java.util.HashMap"  flushCache="true" >
		/*	hrInfo.updateMyHrInfo
			내 정보 보기 수정
		*/
		UPDATE TBL_EXP_USER T
		SET
			T.USER_NM 		= #{USER_NM},
		    T.GENDER 		= #{GENDER},
		    T.USER_DESC 	= #{USER_DESC},
		    T.E_MAIL 		= #{E_MAIL},
		    T.PHONE_NUM 	= #{PHONE_NUM},
		    T.JUMIN 		= #{JUMIN},
		    T.POST_NUM 		= #{POST_NUM},
		    T.ADDR1 		= #{ADDR1},
		    T.ADDR2 		= #{ADDR2},
	        <choose>
		       	<when test="PIC_NUM != null and !PIC_NUM.equals('')"> 
				T.PIC_NUM		=    #{PIC_NUM},
				</when>
		       	<when test="PIC_NUM == null or PIC_NUM.equals('')"> 
				T.PIC_NUM		=    '1' ,
				</when>
			</choose>		         
	        <choose>
		       	<when test="RECOMMENDER_ID != null and !RECOMMENDER_ID.equals('')"> 
				 T.RECOMMENDER_ID = #{RECOMMENDER_ID},
				</when>
		       	<when test="RECOMMENDER_ID == null or RECOMMENDER_ID.equals('')"> 
				 T.RECOMMENDER_ID =  NULL,
				</when>
			</choose>		         
		    T.UPDATE_USER 	= #{sessionVo.userId	},
		    T.UPDATE_DATE 	= GET_KRDT(SYSDATE)
		WHERE T.SP_CSTM_ID	= #{sessionVo.spCstmId	}
		AND T.USER_ID 		= #{sessionVo.userId	}
		
	</update>	
	<delete id="deleteHrInfo" parameterType="java.util.HashMap"  flushCache="true" >
		/*	hrInfo.deleteHrInfo
			인사정보  삭제
		*/
	    { CALL
		    DECLARE
		        p_USER_ID		VARCHAR2(30);
		    BEGIN
		    
		        p_USER_ID	:= #{USER_ID};
		    
				UPDATE TBL_EXP_USER
				SET STATE = 'DELETED' 
				,USE_YN = 'N'
				,DEL_YN = 'Y'
				,UPDATE_USER = #{sessionVo.userId}
				,UPDATE_DATE = GET_KRDT(SYSDATE)
				WHERE SP_CSTM_ID = #{sessionVo.spCstmId}
				AND	  USER_ID	 = #{USER_ID}
		        ;
		        
		        DELETE FROM TBL_EXP_CAREER_HIST
				WHERE SP_CSTM_ID = #{sessionVo.spCstmId}
				AND	  USER_ID	 = #{USER_ID}
		        ;
		        
		        DELETE FROM TBL_EXP_EDUCATION_HIST
				WHERE SP_CSTM_ID = #{sessionVo.spCstmId}
				AND	  USER_ID	 = #{USER_ID}
		        ;
		        
		        DELETE FROM TBL_EXP_GRADE_HIST
				WHERE SP_CSTM_ID = #{sessionVo.spCstmId}
				AND	  USER_ID	 = #{USER_ID}
		        ;
		        
		        DELETE FROM TBL_EXP_POSITION_HIST
				WHERE SP_CSTM_ID = #{sessionVo.spCstmId}
				AND	  USER_ID	 = #{USER_ID}
		        ;
		        
		        COMMIT;
		    END
	    }		
	</delete>
	
	<update id="updateHrImg">
		/*	hrInfo.updateFileImg
			인사정보 직원 이미지 File 정보 수정
		*/
		UPDATE TBL_EXP_FILEMNG SET
			GRP_FILE_ID = #{GRP_FILE_ID} 
		WHERE 1=1
			AND GRP_FILE_ID = #{OLD_GRP_FILE_ID}
			AND OWNER_CD 	= 'USER_FACE'
			AND DEL_YN 		= 'N' 
   	</update>

	<update id="updateSuretyInsurance" parameterType="java.util.HashMap"  flushCache="true" >
		/*	hrInfo.updateSuretyInsurance
			보증보험  저장
		*/
		MERGE INTO TBL_EXP_SURETY_INSURANCE T
		USING (
		
		  SELECT #{sessionVo.spCstmId}								AS SP_CSTM_ID,
		         #{USER_ID} 										AS USER_ID,
		         TO_NUMBER( REPLACE(#{AMOUNT},',','') ) 			AS AMOUNT,
		         TO_DATE( #{INSURANCE_REG_DATE} , 'YYYY-MM-DD' )	AS REG_DATE,
		         TO_DATE( #{INSURANCE_EXP_DATE} , 'YYYY-MM-DD' )	AS EXP_DATE 
		  FROM dual
		  
		) S
		ON (T.SP_CSTM_ID	= S.SP_CSTM_ID
		AND T.USER_ID 		= S.USER_ID
		)
		WHEN MATCHED THEN
		  UPDATE SET
		    T.AMOUNT 		= S.AMOUNT, 
		    T.REG_DATE 		= S.REG_DATE,
		    T.EXP_DATE 		= S.EXP_DATE 
		WHEN NOT MATCHED THEN 
    		INSERT (  SP_CSTM_ID,   USER_ID,   AMOUNT,   REG_DATE,   EXP_DATE)
   			VALUES (S.SP_CSTM_ID, S.USER_ID, S.AMOUNT, S.REG_DATE, S.EXP_DATE)
	</update>
	
	<select id="getEducationHistList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	hrInfo.getEducationHistList
			학력 리스트 조회 
		*/
		SELECT
		EDUCATION_ID
		,SP_CSTM_ID
		,USER_ID
		,TO_CHAR(START_PERIOD_DATE,'YYYY-MM-DD') || ' ~ ' || TO_CHAR(END_PERIOD_DATE,'YYYY-MM-DD') AS PERIOD_DATE 
		,TO_CHAR(START_PERIOD_DATE,'YYYY-MM-DD') AS START_PERIOD_DATE
		,GUBUN
		,SCHOOL_NAME
		,MAJOR
		,GRADUATE_YN
		,TO_CHAR(END_PERIOD_DATE, 'YYYY-MM-DD') AS END_PERIOD_DATE
		FROM TBL_EXP_EDUCATION_HIST
		WHERE 1=1
		AND SP_CSTM_ID = #{sessionVo.spCstmId}
		AND USER_ID = #{USER_ID}
		ORDER BY START_PERIOD_DATE DESC
	</select>
	
	<update id="updateEducationHist">
		/*	hrInfo.updateEducationHist
			학력 리스트 저장
		*/
		MERGE INTO TBL_EXP_EDUCATION_HIST T
		USING (
		
		  SELECT #{sessionVo.spCstmId}						AS SP_CSTM_ID,
		  		 #{USER_ID}									AS USER_ID,
		         #{GUBUN}									AS GUBUN,
		         TO_DATE(#{START_PERIOD_DATE},'YYYY-MM-DD') AS START_PERIOD_DATE,
		         TO_DATE(#{END_PERIOD_DATE},'YYYY-MM-DD')   AS END_PERIOD_DATE,
		         #{SCHOOL_NAME} 							AS SCHOOL_NAME,
		         #{MAJOR} 									AS MAJOR,
		         #{GRADUATE_YN} 							AS GRADUATE_YN,
		         #{EDUCATION_ID}							AS EDUCATION_ID
		  FROM dual
		  
		) S
		ON (T.SP_CSTM_ID	= S.SP_CSTM_ID
		AND T.USER_ID 		= S.USER_ID
		AND T.EDUCATION_ID 	= S.EDUCATION_ID
		)
		WHEN MATCHED THEN
		  UPDATE SET
		    T.GUBUN 				= S.GUBUN, 
		    T.SCHOOL_NAME 			= S.SCHOOL_NAME,
		    T.MAJOR 				= S.MAJOR,
		    T.GRADUATE_YN 			= S.GRADUATE_YN,
		    T.START_PERIOD_DATE		= S.START_PERIOD_DATE,
		    T.END_PERIOD_DATE		= S.END_PERIOD_DATE 
		WHEN NOT MATCHED THEN 
    		INSERT (  SP_CSTM_ID,   USER_ID,   GUBUN,   START_PERIOD_DATE,   END_PERIOD_DATE,	SCHOOL_NAME,	  MAJOR,	  GRADUATE_YN,  EDUCATION_ID)
   			VALUES (S.SP_CSTM_ID, S.USER_ID, S.GUBUN, S.START_PERIOD_DATE, S.END_PERIOD_DATE, S.SCHOOL_NAME,	S.MAJOR,	S.GRADUATE_YN,S.EDUCATION_ID)
   	</update>	
   	
	<delete id="deleteEducationHist" flushCache="true">
		/*	hrInfo.deleteEducationHist
			학력 리스트 삭제 
		*/
	 	DELETE FROM TBL_EXP_EDUCATION_HIST T
	 	WHERE T.SP_CSTM_ID		= #{sessionVo.spCstmId}
		AND T.USER_ID 			= #{USER_ID}
		AND T.EDUCATION_ID 		= #{EDUCATION_ID}
	</delete>
   	
	<select id="getCareerHistList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	hrInfo.getCareerHistList
			경력 리스트 조회 
		*/
		SELECT
		CAREER_ID 
		,SP_CSTM_ID
		,USER_ID
		,TO_CHAR(START_PERIOD_DATE,'YYYY-MM-DD') || ' ~ ' || TO_CHAR(END_PERIOD_DATE,'YYYY-MM-DD	') AS PERIOD_DATE 
		,TO_CHAR(START_PERIOD_DATE,'YYYY-MM-DD') AS START_PERIOD_DATE
		,GUBUN
		,DEPARTMENT
		,POSITION
		,BIZ_INFORM
		,TO_CHAR(END_PERIOD_DATE, 'YYYY-MM-DD') AS END_PERIOD_DATE
		FROM TBL_EXP_CAREER_HIST
		WHERE 1=1
		AND SP_CSTM_ID = #{sessionVo.spCstmId}
		AND USER_ID = #{USER_ID}
		ORDER BY START_PERIOD_DATE DESC
	</select>
	
	<update id="updateCareerHist">
		/*	hrInfo.updateCareerHist
			경력 리스트 저장
		*/
		MERGE INTO TBL_EXP_CAREER_HIST T
		USING (
		
		  SELECT #{sessionVo.spCstmId}						AS SP_CSTM_ID,
		  		 #{USER_ID}									AS USER_ID,
		         #{GUBUN}									AS GUBUN,
		         TO_DATE(#{START_PERIOD_DATE},'YYYY-MM-DD') AS START_PERIOD_DATE,
		         TO_DATE(#{END_PERIOD_DATE},'YYYY-MM-DD')   AS END_PERIOD_DATE,
		         #{DEPARTMENT} 								AS DEPARTMENT,
		         #{POSITION} 								AS POSITION,
		         #{BIZ_INFORM} 								AS BIZ_INFORM,
		         #{CAREER_ID}								AS CAREER_ID
		  FROM dual
		  
		) S
		ON (T.SP_CSTM_ID	= S.SP_CSTM_ID
		AND T.USER_ID 		= S.USER_ID
		AND T.CAREER_ID 	= S.CAREER_ID
		)
		WHEN MATCHED THEN
		  UPDATE SET
		    T.GUBUN 				= S.GUBUN, 
		    T.DEPARTMENT 			= S.DEPARTMENT,
		    T.POSITION 				= S.POSITION,
		    T.BIZ_INFORM 			= S.BIZ_INFORM,
		    T.START_PERIOD_DATE		= S.START_PERIOD_DATE,
		    T.END_PERIOD_DATE		= S.END_PERIOD_DATE
		     
		WHEN NOT MATCHED THEN 
    		INSERT (  SP_CSTM_ID,   USER_ID,   GUBUN,   START_PERIOD_DATE,   END_PERIOD_DATE,	DEPARTMENT,	  POSITION,	  BIZ_INFORM,  CAREER_ID)
   			VALUES (S.SP_CSTM_ID, S.USER_ID, S.GUBUN, S.START_PERIOD_DATE, S.END_PERIOD_DATE, S.DEPARTMENT,	S.POSITION,	S.BIZ_INFORM,S.CAREER_ID)
   	</update>	
   	
	<delete id="deleteCareerHist" flushCache="true">
		/*	hrInfo.deleteCareerHist
			경력 리스트 삭제 
		*/
	 	DELETE FROM TBL_EXP_CAREER_HIST T
	 	WHERE T.SP_CSTM_ID		= #{sessionVo.spCstmId}
		AND T.USER_ID 			= #{USER_ID}
		AND T.CAREER_ID 		= #{CAREER_ID}
	</delete>
	
	<select id="getPositionHistList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	hrInfo.getPositionHistList
			직책 승급 리스트 조회 
		*/
		SELECT 
		 POSITION_ID
		,PH.SP_CSTM_ID
		,PH.USER_ID
		,TO_CHAR(PERSONAL_APPOINTMENT_DATE,'YYYY-MM-DD') AS PA_DATE
		,DIV.DIVISION_NM AS DEPARTMENT
		,DIV.DIVISION_ID
		,GET_CODE_NM('POSITION',POSITION) AS POSITION_NM
		,POSITION
		FROM TBL_EXP_POSITION_HIST PH
		,TBL_EXP_DIVISION DIV
		WHERE 1=1
		AND PH.SP_CSTM_ID = #{sessionVo.spCstmId}
		AND PH.USER_ID = #{USER_ID}
		AND PH.DEPARTMENT = DIV.DIVISION_ID(+)
		AND POSITION != '--'
		ORDER BY PERSONAL_APPOINTMENT_DATE DESC
	</select>
	
	<update id="updatePositionHist">
		/*	hrInfo.updatePositionHist
			직책 승급 리스트 저장 ( hr 역할 )
		*/
		MERGE INTO TBL_EXP_POSITION_HIST T
		USING (
		
		  SELECT #{sessionVo.spCstmId}						AS SP_CSTM_ID,
		  		 #{USER_ID}									AS USER_ID,
		         #{DEPARTMENT} 								AS DEPARTMENT,
		         #{POSITION} 								AS POSITION,
		         TO_DATE(#{PERSONAL_APPOINTMENT_DATE},'YYYY-MM-DD')   AS PERSONAL_APPOINTMENT_DATE,
		         #{POSITION_ID}								AS POSITION_ID
		  FROM dual
		  
		) S
		ON (T.SP_CSTM_ID	= S.SP_CSTM_ID
		AND T.USER_ID 		= S.USER_ID
		AND T.POSITION_ID 	= S.POSITION_ID
		)
		WHEN MATCHED THEN
		  UPDATE SET
		  		T.DEPARTMENT						= S.DEPARTMENT
		  	,	T.POSITION							= S.POSITION
		    , T.PERSONAL_APPOINTMENT_DATE 		= S.PERSONAL_APPOINTMENT_DATE 
		WHEN NOT MATCHED THEN 
    		INSERT (   SP_CSTM_ID,    USER_ID,	  DEPARTMENT,	POSITION,	PERSONAL_APPOINTMENT_DATE,  POSITION_ID)
   			VALUES ( S.SP_CSTM_ID,  S.USER_ID,	S.DEPARTMENT, S.POSITION, S.PERSONAL_APPOINTMENT_DATE,S.POSITION_ID)
   	</update>	
   	
	<delete id="deletePositionHist" flushCache="true">
		/*	hrInfo.deletePositionHist
			직책 승급 삭제 
		*/
	 	DELETE FROM TBL_EXP_POSITION_HIST T
	 	WHERE T.SP_CSTM_ID	= #{sessionVo.spCstmId}
		AND T.USER_ID		= #{USER_ID}
		AND T.POSITION_ID	= #{POSITION_ID}
	</delete>
	
	<select id="getGradeHistList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	hrInfo.getGradeHistList
			등급 승급 리스트 조회 
		*/
		SELECT 
		GRADE_ID
		,SP_CSTM_ID
		,USER_ID
		,TO_CHAR(UPGRADE_DATE, 'YYYY-MM-DD') AS UPGRADE_DATE 
		,GRADE
		,GET_CODE_NM('GRADE', GRADE)		AS GRADE_NM
		FROM TBL_EXP_GRADE_HIST
		WHERE 1=1
		AND SP_CSTM_ID = #{sessionVo.spCstmId}
		AND USER_ID = #{USER_ID}
		ORDER BY DECODE( GRADE, 'S-MASTER' , 0 , 'MASTER' , 1 , 'FA' , 2, 3) DESC
	</select>
	
	<update id="updateGradeHist">
		/*	hrInfo.updateGradeHist
			등급 승급 리스트 저장 ( hr 등급 )
		*/
		MERGE INTO TBL_EXP_GRADE_HIST T
		USING (
		
		  SELECT #{sessionVo.spCstmId}						AS SP_CSTM_ID,
		  		 #{USER_ID}									AS USER_ID,
		         TO_DATE(#{UPGRADE_DATE},'YYYY-MM-DD')   	AS UPGRADE_DATE,
		         #{GRADE} 									AS GRADE,
		         #{GRADE_ID}								AS GRADE_ID
		  FROM dual
		  
		) S
		ON (T.SP_CSTM_ID	= S.SP_CSTM_ID
		AND T.USER_ID 		= S.USER_ID
		AND T.GRADE_ID 		= S.GRADE_ID 
		)
		WHEN MATCHED THEN
		  UPDATE SET
		  	T.GRADE					= S.GRADE
		    ,T.UPGRADE_DATE			= S.UPGRADE_DATE 
		WHEN NOT MATCHED THEN 
    		INSERT (   SP_CSTM_ID,    USER_ID,	  UPGRADE_DATE,	  GRADE,	GRADE_ID)
   			VALUES ( S.SP_CSTM_ID,  S.USER_ID,	S.UPGRADE_DATE, S.GRADE,   S.GRADE_ID)
   	</update>	
   	
	<delete id="deleteGradeHist" flushCache="true">
		/*	hrInfo.deleteGradeHist
			등급 승급 삭제 
		*/
	 	DELETE FROM TBL_EXP_GRADE_HIST T
	 	WHERE T.SP_CSTM_ID	= #{sessionVo.spCstmId}
		AND T.USER_ID		= #{USER_ID}
		AND T.GRADE_ID		= #{GRADE_ID} 
	</delete>
</mapper>
