<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="rstMgn">

	<cache />

	<!--
	성과 관리 
	 -->	
	<sql id='NOT_CONTRACTED_STATE'>
			( 	C.PROCESS_STATE ='PRE_CONTRACT' 
			OR	C.PROCESS_STATE ='ON_CONTRACTING_APPR'
			OR	C.PROCESS_STATE ='CONTRACTING'
			OR	C.PROCESS_STATE ='PENDING'
			OR	C.PROCESS_STATE ='REJECTING'
			)
	</sql>
	 
	<sql id='CONTRACTED_STATE'>
			( 	C.PROCESS_STATE ='CONTRACTED' 
			OR	C.PROCESS_STATE ='ON_COMPLETED_APPR'
			OR	C.PROCESS_STATE ='COMPLETED'
			)
	</sql>
	 
	<select id="getConsultingTypeList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	rstMgn.getConsultingTypeList
			Main/Sub 분류별 실적 관리
		*/

		SELECT  CONSULTING_TYPE
		, GET_CODE_NM( 'CONSULTING_TYPE', CONSULTING_TYPE) CONSULTING_TYPE_NM
		<if test=" SUB_CATEGORY != null and !SUB_CATEGORY.equals('')">
		,CONSULTING_NM
		,CONSULTING_ID
		</if>
		, CNT			AS VALUE
		, SUM(CNT) OVER() ALL_CNT
		, ROUND( ( CNT / SUM(CNT) OVER() ) * 100 , 2 )  AS COLOR_VALUE
		FROM(
		
			SELECT CS.CONSULTING_TYPE 
			<if test=" SUB_CATEGORY != null and !SUB_CATEGORY.equals('')">
			, CS.CONSULTING_NM
			, CS.CONSULTING_ID
			</if>
			, COUNT(*) CNT  
			FROM TBL_EXP_CONTRACT C
			,TBL_EXP_CONSULTING CS
			WHERE C.CONSULTING_ID  = CS.CONSULTING_ID
			AND <include refid="CONTRACTED_STATE"/>
			<if test=" SUB_CATEGORY != null and !SUB_CATEGORY.equals('')">
			AND CS.CONSULTING_TYPE = #{SUB_CATEGORY}
			</if>
			<if test=" FROM_CONTRACT_DATE != null and !FROM_CONTRACT_DATE.equals('')">
			AND C.CONTRACT_DATE <![CDATA[>=]]> TO_DATE( #{FROM_CONTRACT_DATE} , 'YYYY-MM-DD') 
			</if>		
			<if test=" TO_CONTRACT_DATE != null and !TO_CONTRACT_DATE.equals('')">
			AND C.CONTRACT_DATE <![CDATA[<=]]> TO_DATE( #{TO_CONTRACT_DATE} , 'YYYY-MM-DD')
			</if>			
			GROUP BY CS.CONSULTING_TYPE
			<if test=" SUB_CATEGORY != null and !SUB_CATEGORY.equals('')">
			, CS.CONSULTING_NM
			, CS.CONSULTING_ID
			</if>
			
		)
		ORDER BY COLOR_VALUE DESC
	</select>	

	<sql id="getContractList_body">
		SELECT ROW_NUMBER() OVER( ORDER BY C.TOTAL_COST DESC ,TO_CHAR( C.CONTRACT_DATE , 'YYYY' ), TO_CHAR( C.CONTRACT_DATE , 'MM' )) RN
		, C.CONTRACT_ID
		, C.USER_ID
		, GET_USER_NM(C.USER_ID) USER_NM
		, U.SALES_TYPE
		, '' AS TEAM_NM
		, GET_CODE_NM('SALES_TYPE', U.SALES_TYPE ) SALES_TYPE_NM
		, C.CONTACT_DATE
		, TO_CHAR( C.CONTRACT_DATE , 'YYYY' ) AS CONTRACT_YEAR
		, TO_CHAR( C.CONTRACT_DATE , 'MM' ) AS CONTRACT_MONTH
		, C.CONTRACT_TYPE
		, GET_CODE_NM('CONTRACT_TYPE', C.CONTRACT_TYPE ) CONTRACT_TYPE_NM
		, CS.CONSULTING_TYPE
		, GET_CODE_NM('CONSULTING_TYPE', CS.CONSULTING_TYPE ) CONSULTING_TYPE_NM
		, C.EXPIRE_DATE
		, C.TOTAL_COST
		, C.CONSULTING_ID
		, C.PROCESS_STATE
		, C.LAST_SOLUTION
		, C.TAX_MNG
		, C.LABOR_MNG
		, C.CONSULTING_CLASS
		, C.USE_YN
		, C.DEL_YN
		, C.UPDATE_USER
		, C.UPDATE_DATE
		, B.BUYER_ID 
		, B.BUYER_NM
		, B.COMPANY_REGNUM 
		, B.HOW_GET
		, GET_CODE_NM( 'HOW_GET', B.HOW_GET ) HOW_GET_NM
		, CS.CONSULTING_NM
		, NVL((SELECT SUM ( RE.INCOME  ) 
			FROM TBL_EXP_RESULT RE 
			WHERE  C.CONTRACT_ID = RE.CONTRACT_ID AND RE.USE_YN ='Y' AND RE.DEL_YN = 'N' 
		  ),0) AS TOT_INCOME
		,RANK() OVER (ORDER BY (SELECT SUM(RE.INCOME) FROM TBL_EXP_RESULT RE WHERE C.CONTRACT_ID = RE.CONTRACT_ID AND RE.USE_YN ='Y' AND RE.DEL_YN = 'N' ) ) AS RANK
		FROM TBL_EXP_CONTRACT C
		,TBL_EXP_BUYER B
		,TBL_EXP_CONSULTING CS
		,TBL_EXP_USER U
		WHERE 1=1
		AND C.BUYER_ID		= B.BUYER_ID 
		AND C.USER_ID 		= U.USER_ID 
		AND C.CONSULTING_ID	= CS.CONSULTING_ID  
		AND C.USE_YN 		= 'Y' 
		AND C.DEL_YN 		= 'N'
		AND B.USE_YN 		= 'Y' 
		AND B.DEL_YN 		= 'N'
		AND U.USE_YN 		= 'Y' 
		AND U.DEL_YN 		= 'N'
		AND GET_CODE_NM( 'HOW_GET', B.HOW_GET ) IS NOT NULL
		<if test=" parm.CONSULTING_ID != null and !parm.CONSULTING_ID.equals('')">
		AND CS.CONSULTING_ID = #{parm.CONSULTING_ID}
		</if>		
		<if test=" parm.CONSULTING_TYPE != null and !parm.CONSULTING_TYPE.equals('')">
		AND CS.CONSULTING_TYPE = #{parm.CONSULTING_TYPE}
		</if>		
		<if test=" parm.FROM_CONTRACT_DATE != null and !parm.FROM_CONTRACT_DATE.equals('')">
		AND C.CONTRACT_DATE <![CDATA[>=]]> TO_DATE( #{parm.FROM_CONTRACT_DATE} , 'YYYY-MM-DD') 
		</if>		
		<if test=" parm.TO_CONTRACT_DATE != null and !parm.TO_CONTRACT_DATE.equals('')">
		AND C.CONTRACT_DATE <![CDATA[<=]]> TO_DATE( #{parm.TO_CONTRACT_DATE} , 'YYYY-MM-DD')
		</if>
		AND <include refid="CONTRACTED_STATE"/>
		ORDER BY TOTAL_COST DESC ,CONTRACT_YEAR, CONTRACT_MONTH
	</sql>	
	<select id="getContractList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	rstMgn.getContractList
			전체 계약 리스트
		*/
		<include refid="getContractList_body"/>
		<if test=" parm.RANK != null and !parm.RANK.equals('')">
			FETCH NEXT #{parm.RANK} ROWS ONLY
		</if>
	</select>	
	<select id="getContractList_totalCnt" resultType="Integer">
		/* rstMgn.getContractList_totalCnt  */
		<include refid="common.totalWrapStart"/>
		<include refid="getContractList_body"/>
		<include refid="common.totalWrapEnd"/>
	</select>
	<select id="getContractList_paging" resultType="java.util.HashMap">
		/* rstMgn.getContractList_paging  */
		<include refid="common.pagingWrapStart"/>
		<include refid="getContractList_body"/>
		<include refid="common.pagingWrapEnd"/>
	</select>
		
	<sql id="MONTHS_12"> 
		SELECT TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE, 'YEAR'), LEVEL - 1), 'YYYYMM') AS month
		FROM DUAL
		CONNECT BY LEVEL <![CDATA[ <= ]]> 12
	</sql>
	
	<sql id="MONTHS_24"> 
		SELECT TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE, 'YEAR'), -12 + LEVEL - 1), 'YYYYMM') AS month
		FROM DUAL
		CONNECT BY LEVEL <![CDATA[ <= ]]> 24
	</sql>
	
	<sql id="MONTHS_24_YEAR_PARM"> 
		SELECT TO_CHAR(ADD_MONTHS(TO_DATE(#{YEAR}||'01','YYYYMM'), -12 + LEVEL - 1), 'YYYYMM') AS month
		FROM DUAL
		CONNECT BY LEVEL <![CDATA[ <= ]]> 24
	</sql>
	
	<select id="getOrgSellingPriceList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	rstMgn.getOrgSellingPriceList
			순매출 (월자문/1회성컨설팅/외주자문) 
		*/

		SELECT M.MONTH
			, NVL(TOT_INCOME, 0) 			AS TOT_INCOME_ORIGIN_VAL
			, NVL(TOT_COST_PRICE, 0) 		AS TOT_COST_PRICE_ORIGIN_VAL
			, NVL(ORG_SELLING_PRICE, 0)	 	AS ORG_SELLING_PRICE_ORIGIN_VAL
		<choose>
			<when test=" UNIT_TYPE != null and UNIT_TYPE.equals('BIG') "> 
			, ROUND(NVL(TOT_INCOME, 0)/100000000,2) 			AS TOT_INCOME
			, ROUND(NVL(TOT_COST_PRICE, 0)/100000000,2) 		AS TOT_COST_PRICE
			, ROUND(NVL(ORG_SELLING_PRICE, 0)/100000000,2)	 	AS ORG_SELLING_PRICE
			</when>
			<when test=" UNIT_TYPE != null and UNIT_TYPE.equals('SMALL') "> 
			, ROUND(NVL(TOT_INCOME, 0)/1000000,2) 			AS TOT_INCOME
			, ROUND(NVL(TOT_COST_PRICE, 0)/1000000,2) 		AS TOT_COST_PRICE
			, ROUND(NVL(ORG_SELLING_PRICE, 0)/1000000,2)	 	AS ORG_SELLING_PRICE
			</when>
		</choose>			
		FROM ( <include refid="MONTHS_24" /> ) M
		, (
			SELECT R.EACH_MONTH
			, SUM(INCOME)						AS TOT_INCOME
			, SUM(COST_PRICE)					AS TOT_COST_PRICE
			, SUM(ORG_SELLING_PRICE)			AS ORG_SELLING_PRICE
			FROM
			TBL_EXP_CONTRACT C
			,(
				SELECT R.CONTRACT_ID 
				,R.RESULT_ID 
				,R.RESULT_DATE 
				,TO_CHAR(R.RESULT_DATE, 'YYYYMM')	AS EACH_MONTH
				,R.INCOME  
				,( SELECT SUM(COST_PRICE) 
					FROM TBL_EXP_COST CS 
					WHERE CS.CONTRACT_ID 	= R.CONTRACT_ID 
					AND CS.RESULT_ID 		= R.RESULT_ID 
					AND CS.USE_YN			= 'Y' 
					AND CS.DEL_YN 			= 'N' 
				) AS COST_PRICE
				,R.ORG_SELLING_PRICE 
				,R.REMAINING_SUM
				FROM TBL_EXP_RESULT R 
			    WHERE 1=1  
			    AND R.USE_YN 				= 'Y'
			    AND R.DEL_YN 				= 'N'
				AND TO_CHAR(R.RESULT_DATE, 'YYYY') <![CDATA[ >= ]]> TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE), -12), 'YYYY')
				AND TO_CHAR(R.RESULT_DATE, 'YYYY') <![CDATA[ <= ]]> TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE), 0), 'YYYY')
			) R
			,TBL_EXP_CONSULTING CS
			WHERE 1=1
			AND <include refid="CONTRACTED_STATE"/>
			AND C.CONSULTING_ID		= CS.CONSULTING_ID
			AND CS.CONSULTING_TYPE 	= #{CONSULTING_TYPE}
			AND	C.CONTRACT_ID		= R.CONTRACT_ID 
			AND	C.USE_YN 			= 'Y'
			AND	C.DEL_YN 			= 'N'
			GROUP BY R.EACH_MONTH
		) Data 
		WHERE  M.month = Data.EACH_MONTH(+)
		ORDER BY M.month	
		
	</select>

  	<sql id="getResultDataDuringTwoYears">
  	
	   	/* RESULT테이블에서 2년치의 데이터를 조회. */
		SELECT R.CONTRACT_ID 
		,R.RESULT_ID 
		,R.RESULT_DATE 
		,TO_CHAR(R.RESULT_DATE, 'YYYYMM')	AS EACH_MONTH
		,R.INCOME  
		,( SELECT SUM(COST_PRICE) 
			FROM TBL_EXP_COST CS 
			WHERE CS.CONTRACT_ID = R.CONTRACT_ID 
			AND CS.RESULT_ID = R.RESULT_ID 
			AND CS.USE_YN='Y' AND CS.DEL_YN ='N' 
		) AS COST_PRICE
		,R.ORG_SELLING_PRICE 
		,R.REMAINING_SUM
		FROM TBL_EXP_RESULT R 
	    WHERE 1=1 
	    AND R.USE_YN = 'Y'
	    AND R.DEL_YN = 'N'
		AND TO_CHAR(R.RESULT_DATE, 'YYYY')   <![CDATA[ >= ]]>   TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE), -12), 'YYYY')
		AND TO_CHAR(R.RESULT_DATE, 'YYYY')   <![CDATA[ <= ]]>   TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE), 	 0), 'YYYY')
		
  	</sql>
	<select id="getSellingGrowthRateList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	rstMgn.getSellingGrowthRateList
			순매출 성장률
		*/
	
		WITH MONTHS_24 AS (<include refid="MONTHS_24"/>)
	 	,RESULT_TAB_BY_MONTH AS (
	 	
			SELECT R.EACH_MONTH
			, SUM(INCOME)						AS TOT_INCOME
			, SUM(COST_PRICE)					AS TOT_COST_PRICE
			, SUM(ORG_SELLING_PRICE)			AS ORG_SELLING_PRICE
			FROM
			 TBL_EXP_CONTRACT C
			,(<include refid="getResultDataDuringTwoYears"/>) R
			WHERE 1=1
			AND <include refid="CONTRACTED_STATE"/>
			AND	C.CONTRACT_ID	= R.CONTRACT_ID 
			AND	C.USE_YN 		= 'Y'
			AND	C.DEL_YN 		= 'N'
			GROUP BY R.EACH_MONTH	 	
	 	)
		,RESULT_TAB AS (

			/* 작년 1월 부터 올해 12월까지 월별 매출 및 실적*/
			SELECT M.MONTH,  SUBSTR(M.MONTH,1,4) YEAR 
			, NVL(TOT_INCOME, 0) 		AS TOT_INCOME
			, NVL(TOT_COST_PRICE, 0) 	AS TOT_COST_PRICE
			, NVL(ORG_SELLING_PRICE, 0) AS ORG_SELLING_PRICE
			FROM 
			 MONTHS_24 M
			,RESULT_TAB_BY_MONTH DATA 
			WHERE M.MONTH = DATA.EACH_MONTH(+)
			ORDER BY M.MONTH	
			
		)
		,SALES_GROWTH AS (
		
		    SELECT A.MONTH AS THIS_YEAR
	        ,NVL(B.MONTH , TO_CHAR(TO_DATE(A.MONTH,'YYYYMM') -INTERVAL '1' YEAR,'YYYYMM') ) AS LAST_YEAR
	        ,A.ORG_SELLING_PRICE AS THIS_YEAR_SALES
	        ,B.ORG_SELLING_PRICE AS LAST_YEAR_SALES
	        ,DECODE(B.ORG_SELLING_PRICE,0,0, (A.ORG_SELLING_PRICE / B.ORG_SELLING_PRICE) * 100) AS GROWTH_RATE
		    FROM 
		     RESULT_TAB A
		    ,RESULT_TAB B 
		    WHERE A.YEAR = (B.YEAR (+) + 1 )
			AND TO_NUMBER(SUBSTR(A.MONTH, 5, 2)) = TO_NUMBER(SUBSTR(B.MONTH(+), 5, 2)) 
		)

		SELECT THIS_YEAR, MAX(LAST_YEAR) 	LAST_YEAR
			,NVL(MAX( THIS_YEAR_SALES),0) 	THIS_YEAR_SALES_ORIGIN_VAL
			,NVL(MAX( LAST_YEAR_SALES),0)	LAST_YEAR_SALES_ORIGIN_VAL
			,NVL(MAX( GROWTH_RATE) ,0)		GROWTH_RATE_ORIGIN_VAL
			
		<choose>
			<when test=" UNIT_TYPE != null and UNIT_TYPE.equals('BIG') "> 
			,ROUND(NVL(MAX( THIS_YEAR_SALES)/100000000 ,0),2) THIS_YEAR_SALES
			,ROUND(NVL(MAX( LAST_YEAR_SALES)/100000000 ,0),2) LAST_YEAR_SALES
			</when>
			<when test=" UNIT_TYPE != null and UNIT_TYPE.equals('SMALL') "> 
			,ROUND(NVL(MAX( THIS_YEAR_SALES)/1000000 ,0),2) THIS_YEAR_SALES
			,ROUND(NVL(MAX( LAST_YEAR_SALES)/1000000 ,0),2) LAST_YEAR_SALES
			</when>
		</choose>			
			,ROUND(NVL(MAX( GROWTH_RATE) ,0),2) GROWTH_RATE
		
		FROM(
			SELECT 
			G.THIS_YEAR, G.LAST_YEAR, G.THIS_YEAR_SALES, G.LAST_YEAR_SALES, G.GROWTH_RATE 
			FROM SALES_GROWTH G  
			WHERE THIS_YEAR <![CDATA[ >= ]]>  TO_CHAR(SYSDATE, 'YYYY')||'01'
			UNION 
			SELECT TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE, 'YEAR'), LEVEL - 1), 'YYYYMM') AS MONTH
			,null,null,null,null
			FROM DUAL
			CONNECT BY LEVEL  <![CDATA[ <= ]]>  12
		)
		GROUP BY THIS_YEAR
		ORDER BY THIS_YEAR
	</select>
	
	<select id="getSellingBranchList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	rstMgn.getSellingBranchList
			지사별 순매출  
		*/
		WITH MONTHS_12 AS (<include refid="MONTHS_12"/>)
		,EACH_PAYMENT AS (
		
			SELECT  M.month,  DATA.BRANCH_ID, DATA.ORG_SELLING_PRICE
			FROM MONTHS_12 M
			,(
				SELECT RESULT_MONTH ,BRANCH_ID ,SUM(ORG_SELLING_PRICE) ORG_SELLING_PRICE
				FROM(
						SELECT
						TO_CHAR( R.RESULT_DATE, 'YYYYMM') AS RESULT_MONTH
						,U.USER_NM
						,R.INCOME
						,( SELECT SUM(COST_PRICE) 
							FROM TBL_EXP_COST CS 
							WHERE CS.CONTRACT_ID 	= R.CONTRACT_ID 
							AND CS.RESULT_ID 		= R.RESULT_ID 
							AND CS.USE_YN			= 'Y' 
							AND CS.DEL_YN 			= 'N' 
						) AS COST_PRICE
						,R.ORG_SELLING_PRICE 
						,DIV.DEPTH2 AS BRANCH_ID
						FROM TBL_EXP_RESULT R
						,TBL_EXP_CONTRACT C
						,TBL_EXP_USER U
						,TBL_EXP_DIVISION  DIV
						WHERE 1=1
						AND <include refid="CONTRACTED_STATE"/>
						AND U.DIVISION_ID 		= DIV.DIVISION_ID 
						AND U.DIVISION_ID 		LIKE 'SALES_DIV%' /* 일때, 지사가 있음 */
						AND C.CONTRACT_ID		= R.CONTRACT_ID 
						AND C.USER_ID			= U.USER_ID
			 			AND C.USE_YN 			= 'Y' 
			 			AND C.DEL_YN 			= 'N'	
						AND R.USE_YN			= 'Y'
						AND R.DEL_YN			= 'N'
						AND TO_CHAR(R.RESULT_DATE, 'YYYY') <![CDATA[ >= ]]> TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE), -12), 'YYYY')
						AND TO_CHAR(R.RESULT_DATE, 'YYYY') <![CDATA[ <= ]]> TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE), 0), 'YYYY')
				)	
				GROUP BY  RESULT_MONTH ,BRANCH_ID 
			) DATA
			WHERE M.MONTH = DATA.RESULT_MONTH(+)
		)
		<choose>
	       	<when test=" BRANCH_ID == null  "> 
				SELECT DISTINCT BRANCH_ID 
				FROM EACH_PAYMENT  
				WHERE BRANCH_ID IS NOT NULL   
				ORDER BY BRANCH_ID
	      	</when>
	       	<when test=" BRANCH_ID != null and !BRANCH_ID.equals('') ">  
				SELECT MONTH
				<choose>
					<when test=" UNIT_TYPE != null and UNIT_TYPE.equals('BIG') "> 
						, ROUND( SUM(ORG_SELLING_PRICE) / 100000000 , 2 ) AS ORG_SELLING_PRICE
					</when>
					<when test=" UNIT_TYPE != null and UNIT_TYPE.equals('SMALL') "> 
						, ROUND( SUM(ORG_SELLING_PRICE) / 1000000 , 2 ) AS ORG_SELLING_PRICE
					</when>
				</choose>			
				FROM (
					SELECT MONTH, BRANCH_ID ,ORG_SELLING_PRICE
					FROM EACH_PAYMENT
					WHERE ( BRANCH_ID = #{BRANCH_ID} OR BRANCH_ID IS NULL )
					ORDER BY MONTH
				)
				GROUP BY MONTH	
				ORDER BY MONTH
	      	</when>
	      	<otherwise>			
	      	</otherwise>
		</choose>		
	
	</select>
	
	<select id="getSellingDetailList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	rstMgn.getSellingDetailList
			상세별 순매출 (컨설팅상세별) 
		*/

	SELECT CONSULTING_ID, CONSULTING_NM, YEAR, SUM( ORG_SELLING_PRICE) AS ORG_SELLING_PRICE
	FROM (
		SELECT 
		  CT.CONSULTING_ID
		, CT.CONSULTING_NM 
		, TO_CHAR(RST.RESULT_DATE, 'YYYY') 						AS YEAR
		<choose>
			<when test=" UNIT_TYPE != null and UNIT_TYPE.equals('BIG') "> 
			, ROUND(NVL(SUM(ORG_SELLING_PRICE),0) / 100000000 , 2) 	AS ORG_SELLING_PRICE
			</when>
			<when test=" UNIT_TYPE != null and UNIT_TYPE.equals('SMALL') "> 
			, ROUND(NVL(SUM(ORG_SELLING_PRICE),0) / 1000000 , 2) 	AS ORG_SELLING_PRICE
			</when>
		</choose>			
		FROM TBL_EXP_CONTRACT C
		,TBL_EXP_RESULT RST
		,TBL_EXP_CONSULTING CT
		WHERE 1=1
		AND <include refid="CONTRACTED_STATE"/>
		AND C.CONTRACT_ID 		= RST.CONTRACT_ID 
		AND C.USE_YN 			= 'Y' 
		AND C.DEL_YN 			= 'N'
		AND RST.USE_YN 			= 'Y' 
		AND RST.DEL_YN 			= 'N'
		AND CT.CONSULTING_ID	= C.CONSULTING_ID 
		<choose>
	       	<when test=" LAST_YEAR == null  "> 
				AND TO_CHAR(RST.RESULT_DATE, 'YYYY')   <![CDATA[ >= ]]> TO_CHAR( SYSDATE , 'YYYY')
	      	</when>
	       	<when test=" LAST_YEAR != null  ">  
				AND TO_CHAR(RST.RESULT_DATE, 'YYYY')   <![CDATA[ >= ]]> TO_CHAR( SYSDATE - INTERVAL '1' YEAR ,'YYYY')
				AND TO_CHAR(RST.RESULT_DATE, 'YYYY')   <![CDATA[ <  ]]> TO_CHAR( SYSDATE , 'YYYY')
	      	</when>
	      	<otherwise>			
	      	</otherwise>
		</choose>	
		GROUP BY CT.CONSULTING_ID, CT.CONSULTING_NM, TO_CHAR(RST.RESULT_DATE, 'YYYY') 
	)
	GROUP BY CONSULTING_ID, CONSULTING_NM, YEAR
	ORDER BY ORG_SELLING_PRICE DESC
	FETCH NEXT 5 ROWS ONLY
	</select>		

	
	<select id="getFaPayList" resultType="java.util.HashMap" flushCache="true" useCache="false">
		/*	rstMgn.getFaPayList
			FA 월자문 수수료 ( 월자문 / 일회성 / 외주자문) 
		*/
		WITH MONTHS_24 AS (<include refid="MONTHS_24"/>)
		,EACH_PAYMENT AS (
		
			SELECT  M.month, DATA.TOTAL_PAYMENT
			FROM MONTHS_24 M
			,(
				SELECT RESULT_MONTH ,SUM( PAYMENT) TOTAL_PAYMENT
				FROM(
						SELECT
						TO_CHAR( R.RESULT_DATE, 'YYYYMM') AS RESULT_MONTH
						,R.RESULT_ID
						,R.INCOME
						,P.PAYMENT
						FROM TBL_EXP_RESULT R
						,TBL_EXP_CONTRACT C
						,TBL_EXP_PAYMENT P
						,TBL_EXP_CONTRACT_MEMBER CM
						,TBL_EXP_CONSULTING CS
						WHERE C.CONTRACT_ID	= R.CONTRACT_ID 
						AND <include refid="CONTRACTED_STATE"/>
						AND R.CONTRACT_ID	= P.CONTRACT_ID 
						AND R.RESULT_ID		= P.RESULT_ID 
						AND C.CONSULTING_ID = CS.CONSULTING_ID
						AND CS.CONSULTING_TYPE = #{CONSULTING_TYPE}
						AND C.CONTRACT_ID 	= CM.CONTRACT_ID 
						AND P.RELATION_TYPE	= CM.RELATION_TYPE
						AND P.USER_ID 		= CM.USER_ID
						AND R.USE_YN		= 'Y'
						AND R.DEL_YN		= 'N'
						AND P.USE_YN		= 'Y'
						AND P.DEL_YN		= 'N'
						AND CM.USE_YN		= 'Y'
						AND CM.DEL_YN		= 'N'
						AND TO_CHAR(R.RESULT_DATE, 'YYYY') <![CDATA[ >= ]]> TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE), -12), 'YYYY')
						AND TO_CHAR(R.RESULT_DATE, 'YYYY') <![CDATA[ <= ]]> TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE), 0), 'YYYY')
				)	
				GROUP BY  RESULT_MONTH
			) DATA
			WHERE M.MONTH = DATA.RESULT_MONTH(+)
		)
		SELECT MONTH
			, NVL(SUM ( TOTAL_PAYMENT ),0) AS TOTAL_PAYMENT_ORIGIN_VAL
		<choose>
			<when test=" UNIT_TYPE != null and UNIT_TYPE.equals('BIG') "> 
			, ROUND(NVL(SUM ( TOTAL_PAYMENT ),0) / 100000000 ,2) AS TOTAL_PAYMENT
			</when>
			<when test=" UNIT_TYPE != null and UNIT_TYPE.equals('SMALL') "> 
			, ROUND(NVL(SUM ( TOTAL_PAYMENT ),0) / 1000000 ,2) AS TOTAL_PAYMENT
			</when>
		</choose>			
		FROM EACH_PAYMENT
		GROUP BY MONTH
		ORDER BY MONTH
	</select>

	
	<select id="getContractCnt" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	rstMgn.getContractCnt
			전체 월자문 계약건수
		*/
			
		WITH MONTHS_24 AS (<include refid="MONTHS_24"/>)
		,EACH_CONTRACT AS (
			SELECT M.month, COUNT(CONTRACT_ID) CONTRACT_CNT
			FROM MONTHS_24 M
			, (
				SELECT C.CONTRACT_ID
				, TO_CHAR(C.CONTRACT_DATE, 'YYYYMM') AS EACH_MONTH
				FROM TBL_EXP_CONTRACT C
				,TBL_EXP_CONSULTING CST
				WHERE 1=1
				AND CST.CONSULTING_TYPE 	= 'MONTHLY'
				AND <include refid="CONTRACTED_STATE"/>
				AND C.CONSULTING_ID 		= CST.CONSULTING_ID
				AND C.USE_YN 				= 'Y' 
				AND C.DEL_YN 				= 'N'
				GROUP BY C.CONTRACT_ID, C.TOTAL_COST, TO_CHAR(C.CONTRACT_DATE, 'YYYYMM')
			) DATA 
			WHERE  M.month = DATA.EACH_MONTH
			GROUP BY M.month
			ORDER BY M.month 
		)
		SELECT M.MONTH  , NVL(CONTRACT_CNT, 0) CONTRACT_CNT
		FROM MONTHS_24 M, EACH_CONTRACT C
		WHERE M.MONTH = C.MONTH(+)
		ORDER BY M.MONTH

	</select>
	
	
	<select id="getFASellingOrder" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	rstMgn.getFASellingOrder
			전체  FA 매출 순위 
		*/
		WITH EACH_SELLING_PRICE AS ( 
						SELECT DATA.RESULT_YEAR , DATA.USER_ID , DATA.USER_NM , DATA.PAYMENT
						FROM ( 
							SELECT RESULT_YEAR , USER_ID , USER_NM ,  SUM(PAYMENT) PAYMENT
							FROM
							( 
								SELECT TO_CHAR( R.RESULT_DATE, 'YYYY') AS RESULT_YEAR 
								, SUM( P.PAYMENT ) AS PAYMENT
								, CM.USER_ID , GET_USER_NM(CM.USER_ID) AS USER_NM
								FROM TBL_EXP_RESULT R 
								, TBL_EXP_CONTRACT C 
								, TBL_EXP_CONTRACT_MEMBER CM
								, TBL_EXP_PAYMENT P 
								WHERE C.CONTRACT_ID = R.CONTRACT_ID
								AND <include refid="CONTRACTED_STATE"/>
								AND C.CONTRACT_ID 	= CM.CONTRACT_ID
								AND C.CONTRACT_ID 	= P.CONTRACT_ID
								AND R.RESULT_ID 	= P.RESULT_ID
								AND P.RELATION_TYPE = CM.RELATION_TYPE
								AND P.USE_YN 		= 'Y'
								AND P.DEL_YN 		= 'N'
								AND R.USE_YN 		= 'Y'
								AND R.DEL_YN 		= 'N'
								AND CM.USE_YN 		= 'Y'
								AND CM.DEL_YN 		= 'N'
								<choose>
							       	<when test=" LAST_YEAR == null  "> 
										AND TO_CHAR(R.RESULT_DATE, 'YYYY')   <![CDATA[ >= ]]> TO_CHAR( SYSDATE , 'YYYY')
							      	</when>
							       	<when test=" LAST_YEAR != null  ">  
										AND TO_CHAR(R.RESULT_DATE, 'YYYY')   <![CDATA[ >= ]]> TO_CHAR( SYSDATE - INTERVAL '1' YEAR ,'YYYY')
										AND TO_CHAR(R.RESULT_DATE, 'YYYY')   <![CDATA[ <  ]]> TO_CHAR( SYSDATE , 'YYYY')
							      	</when>
							      	<otherwise>			
							      	</otherwise>
								</choose>
								GROUP BY TO_CHAR( R.RESULT_DATE, 'YYYY'), CM.USER_ID, GET_USER_NM(CM.USER_ID)	
							)
							GROUP BY RESULT_YEAR , USER_ID , USER_NM 
						) DATA
		) 
		SELECT RESULT_YEAR AS YEAR
		, USER_NM
		, NVL(SUM(PAYMENT),0) AS PAYMENT_ORIGIN_VAL
		<choose>
			<when test=" UNIT_TYPE != null and UNIT_TYPE.equals('BIG') "> 
			, ROUND(NVL(SUM(PAYMENT),0) / 100000000,2) AS PAYMENT
			</when>
			<when test=" UNIT_TYPE != null and UNIT_TYPE.equals('SMALL') "> 
			, ROUND(NVL(SUM(PAYMENT),0) / 1000000,2) AS PAYMENT
			</when>
		</choose>			
		FROM EACH_SELLING_PRICE
		WHERE USER_NM IS NOT NULL
		GROUP BY RESULT_YEAR, USER_NM
		ORDER BY PAYMENT DESC 
		FETCH NEXT 10 ROWS ONLY
	</select>	
	
	<select id="getBuyerSellingList" resultType="java.util.HashMap">
		/* rstMgn.getBuyerSellingList  
			매출 top RANK 거래처 
		*/
		SELECT *
		FROM (
				SELECT CONTRACT_YEAR,CONTRACT_MONTH
				,BUYER_ID, BUYER_NM, HOW_GET, HOW_GET_NM
				,CONTRACT_TYPE, CONTRACT_TYPE_NM
				,COMPANY_REGNUM
				,CONSULTING_NM
				,CONSULTING_TYPE
				,GET_CODE_NM('CONSULTING_TYPE', CONSULTING_TYPE ) CONSULTING_TYPE_NM
				,USER_NM
				,SUM( TOTAL_COST ) TOTAL_COST
				,SUM( SUM_INCOME ) TOT_INCOME
				FROM(
						
						SELECT ROWNUM 		
						, TO_CHAR( CONTRACT_DATE , 'YYYY' ) AS CONTRACT_YEAR
						, TO_CHAR( CONTRACT_DATE , 'MM' ) AS CONTRACT_MONTH
						, BUYER_ID
						, BUYER_NM
						, HOW_GET
						, GET_CODE_NM( 'HOW_GET', HOW_GET ) HOW_GET_NM
						, CONTRACT_TYPE
						, GET_CODE_NM('CONTRACT_TYPE', CONTRACT_TYPE ) CONTRACT_TYPE_NM
						, CONSULTING_TYPE
						, COMPANY_REGNUM 
						, CONSULTING_NM
						, TOTAL_COST
						, SUM_INCOME 
						, ( SELECT USER_NM FROM TBL_EXP_USER WHERE USER_ID = A.USER_ID ) USER_NM 
						FROM (
						    SELECT B.BUYER_NM,B.HOW_GET,B.COMPANY_REGNUM, C.USER_ID,
						    		(
						            SELECT SUM(R.INCOME)
						            FROM TBL_EXP_RESULT R
						            WHERE R.CONTRACT_ID = C.CONTRACT_ID
						                AND R.USE_YN = 'Y'
						                AND R.DEL_YN = 'N'
						            ) SUM_INCOME
									,CS.CONSULTING_NM
									,CS.CONSULTING_TYPE
									,C.TOTAL_COST
									,C.CONTRACT_DATE
									,C.BUYER_ID
									,C.CONTRACT_TYPE
						    FROM TBL_EXP_CONTRACT C, TBL_EXP_BUYER B, TBL_EXP_CONSULTING CS
						    WHERE 1 = 1
						    	AND <include refid="CONTRACTED_STATE"/>
						        AND C.BUYER_ID = B.BUYER_ID
								<if test=" parm.FROM_CONTRACT_DATE != null and !parm.FROM_CONTRACT_DATE.equals('')">
								AND C.CONTRACT_DATE <![CDATA[>=]]> TO_DATE( #{parm.FROM_CONTRACT_DATE} , 'YYYY-MM-DD') 
								</if>		
								<if test=" parm.TO_CONTRACT_DATE != null and !parm.TO_CONTRACT_DATE.equals('')">
								AND C.CONTRACT_DATE <![CDATA[<=]]> TO_DATE( #{parm.TO_CONTRACT_DATE} , 'YYYY-MM-DD')
								</if>
						        AND B.USE_YN = 'Y'
						        AND B.DEL_YN = 'N'
						        AND C.USE_YN = 'Y'
						        AND C.DEL_YN = 'N'
						        AND C.CONSULTING_ID = CS.CONSULTING_ID
								<if test=" parm.CONSULTING_TYPE != null and !parm.CONSULTING_TYPE.equals('')">
								AND CS.CONSULTING_TYPE = #{parm.CONSULTING_TYPE}
								</if>		
						    ORDER BY SUM_INCOME DESC
						) A
				)
				GROUP BY CONTRACT_YEAR,CONTRACT_MONTH
						,BUYER_ID, BUYER_NM, HOW_GET, HOW_GET_NM
						,CONTRACT_TYPE, CONTRACT_TYPE_NM
						,COMPANY_REGNUM
						,CONSULTING_NM
						,CONSULTING_TYPE
						,USER_NM
		)
		<if test=" parm.RANK != null and !parm.RANK.equals('')">
		 FETCH NEXT #{parm.RANK} ROWS ONLY
		 </if>
	</select>	
	
	<select id="getMyPaymentList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	rstMgn.getMyPaymentList
			월별 매출 누적합계 , 전월대비 매출 증감분 
		*/
		SELECT MONTH
		<choose>
			<when test=" UNIT_TYPE != null and UNIT_TYPE.equals('BIG') ">
			, ROUND(nvl(sum_payment ,0)/100000000,2) AS SUM_PAYMENT 
			</when>
			<when test=" UNIT_TYPE != null and UNIT_TYPE.equals('SMALL') ">
			, ROUND(nvl(sum_payment ,0)/1000000,2) AS SUM_PAYMENT 
			</when>
		</choose>			

		FROM ( <include refid="MONTHS_24_YEAR_PARM" /> ) M
			 ,(
				SELECT TO_CHAR(UPDATE_DATE,'YYYYMM') UPDATE_DATE, SUM( PAYMENT  ) SUM_PAYMENT
				FROM TBL_EXP_PAYMENT p
				WHERE 1=1
				<choose>
					<when test=" GUBUN != null and GUBUN.equals('FA') ">
					AND p.USER_ID = #{sessionVo.userId}
					</when>
				</choose>				
				AND P.PAYMENT IS NOT NULL 
				AND TO_CHAR(p.UPDATE_DATE, 'YYYY')   <![CDATA[ >= ]]>   TO_CHAR(ADD_MONTHS(TO_DATE(#{YEAR}||'01','YYYYMM'),	-12), 'YYYY')
				AND TO_CHAR(p.UPDATE_DATE, 'YYYY')   <![CDATA[ <= ]]>   TO_CHAR(ADD_MONTHS(TO_DATE(#{YEAR}||'01','YYYYMM'),	  0), 'YYYY')
				GROUP BY TO_CHAR(P.UPDATE_DATE,'YYYYMM')
			) Data 
		WHERE  M.month = Data.UPDATE_DATE(+)
		ORDER BY M.MONTH 
	</select>	
	
	<select id="getContarctCntList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	rstMgn.getContarctCntList
			계약 건수(전체) 
		*/
		SELECT MONTH, NVL(CONTRACT_CNT, 0) AS CONTRACT_CNT
		FROM ( <include refid="MONTHS_24_YEAR_PARM" /> ) M
			,(
				SELECT TO_CHAR(CONTRACT_DATE,'YYYYMM') CONTRACT_DATE, COUNT(*) CONTRACT_CNT
				FROM TBL_EXP_CONTRACT C
				,TBL_EXP_BUYER B
				WHERE 1=1
				AND <include refid="CONTRACTED_STATE"/>
				AND C.USE_YN = 'Y' AND C.DEL_YN = 'N'
				AND B.USE_YN = 'Y' AND B.DEL_YN = 'N'
				AND C.BUYER_ID	= B.BUYER_ID
				<choose>
					<when test=" GUBUN != null and GUBUN.equals('FA') ">
				AND C.USER_ID	= #{sessionVo.userId}
					</when>
				</choose>				
				GROUP BY TO_CHAR(CONTRACT_DATE,'YYYYMM')
				ORDER BY CONTRACT_DATE
		) DATA 
		WHERE  M.month = Data.CONTRACT_DATE(+)
		ORDER BY M.MONTH
	</select>	
	
	<select id="getFaPaymentAcc" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	rstMgn.getFaPaymentAcc
			FA 월별 매출 누적합계 , FA 계약건수( 전체 )
		*/
		SELECT 
	    USER_ID
	    ,GET_USER_NM(USER_ID) AS USER_NM
	    ,DECODE( USER_ID, #{sessionVo.userId},'Y','N') AS IS_MY_RANK
	    ,RANK() OVER (ORDER BY YEARLY_PAYMENT DESC, CONTRACT_CNT DESC) AS RANK
	    ,RANK() OVER (ORDER BY CONTRACT_CNT DESC ,YEARLY_PAYMENT DESC ) AS CC_RANK
	    ,CONTRACT_CNT
	    ,ROUND( CONTRACT_CNT / SUM(CONTRACT_CNT) OVER() * 100, 2) AS CC_PERCENT
		<choose>
			<when test=" UNIT_TYPE != null and UNIT_TYPE.equals('BIG') ">
			, ROUND(	YEARLY_PAYMENT /100000000, 2)			AS YEARLY_PAYMENT 
			, ROUND(	(YEARLY_PAYMENT /100000000 
			/ SUM(YEARLY_PAYMENT /100000000) OVER()) * 100, 2) 	AS PERCENT
			</when>
			<when test=" UNIT_TYPE != null and UNIT_TYPE.equals('SMALL') ">
			, ROUND(	YEARLY_PAYMENT /1000000,2) 				AS YEARLY_PAYMENT 
			,DECODE( SUM(YEARLY_PAYMENT /1000000) OVER(), 0, 0, ROUND(	(YEARLY_PAYMENT  /1000000
			/ SUM(YEARLY_PAYMENT /1000000) OVER()) * 100, 2) ) 	AS PERCENT
			</when>
		</choose>		
		FROM (
		    SELECT 
		        USER_ID,
		        SUM(YEARLY_PAYMENT) AS YEARLY_PAYMENT,
		        SUM(CONTRACT_CNT) AS CONTRACT_CNT
		    FROM (
		        SELECT 
		            USER_ID,
		            SUM(YEARLY_PAYMENT) AS YEARLY_PAYMENT,
		            0 AS CONTRACT_CNT
		        FROM (
		            SELECT DISTINCT 
		                P.USER_ID,
		                CASE 
							<choose>
								<when test=" YEAR_MONTH != null and YEAR_MONTH == 'YEAR' ">
									<if test=" YEAR != null and !YEAR.equals('')">
				                    	WHEN TO_CHAR(R.RESULT_DATE, 'YYYY') = #{YEAR} 
				                    </if>
								</when>
								<when test=" YEAR_MONTH != null and YEAR_MONTH == 'MONTH' ">
			                    WHEN TO_CHAR(R.RESULT_DATE, 'YYYYMM') = TO_CHAR(TO_DATE( #{YEAR},'YYYY'), 'YYYYMM') 
								</when>
							</choose>		
		                    THEN P.PAYMENT 
		                    ELSE 0 
		                END AS YEARLY_PAYMENT
		            FROM 
		                TBL_EXP_CONTRACT C,
		                TBL_EXP_RESULT R,
		                TBL_EXP_CONTRACT_MEMBER CM,
		                TBL_EXP_PAYMENT P
		            WHERE 
		                C.CONTRACT_ID = R.CONTRACT_ID 
		                AND C.CONTRACT_ID = CM.CONTRACT_ID 
		                AND C.CONTRACT_ID = P.CONTRACT_ID 
		                AND R.CONTRACT_ID = P.CONTRACT_ID 
		                AND P.RELATION_TYPE = CM.RELATION_TYPE
		                AND C.USE_YN = 'Y' 
		                AND C.DEL_YN = 'N' 
		                AND R.USE_YN = 'Y' 
		                AND R.DEL_YN = 'N'
		                AND CM.USE_YN = 'Y' 
		                AND CM.DEL_YN = 'N' 
		                AND P.USE_YN = 'Y' 
		                AND P.DEL_YN = 'N'
						<choose>
							<when test=" YEAR_MONTH != null and YEAR_MONTH == 'YEAR' ">
			                AND TO_CHAR(R.RESULT_DATE, 'YYYY') = #{YEAR}
							</when>
							<when test=" YEAR_MONTH != null and YEAR_MONTH == 'MONTH' ">
			                AND TO_CHAR(R.RESULT_DATE, 'YYYYMM') = TO_CHAR(TO_DATE( #{YEAR},'YYYY'), 'YYYYMM') 
							</when>
						</choose>		
		                AND CM.RELATION_TYPE = 'SALES'
		        )
		        GROUP BY USER_ID
		
		        UNION ALL 
		
		        SELECT 
		            USER_ID,
		            0 AS YEARLY_PAYMENT,
		            COUNT(CONTRACT_ID) AS CONTRACT_CNT
		        FROM (
		            SELECT DISTINCT 
		                P.USER_ID,
		                C.CONTRACT_ID
		            FROM 
		                TBL_EXP_CONTRACT C,
		                TBL_EXP_RESULT R,
		                TBL_EXP_CONTRACT_MEMBER CM,
		                TBL_EXP_PAYMENT P
		            WHERE 
		                C.CONTRACT_ID = R.CONTRACT_ID 
		                AND C.CONTRACT_ID = CM.CONTRACT_ID 
		                AND C.CONTRACT_ID = P.CONTRACT_ID 
		                AND R.CONTRACT_ID = P.CONTRACT_ID 
		                AND P.RELATION_TYPE = CM.RELATION_TYPE
		                AND C.USE_YN = 'Y' 
		                AND C.DEL_YN = 'N' 
		                AND R.USE_YN = 'Y' 
		                AND R.DEL_YN = 'N'
		                AND CM.USE_YN = 'Y' 
		                AND CM.DEL_YN = 'N' 
		                AND P.USE_YN = 'Y' 
		                AND P.DEL_YN = 'N'
						<choose>
							<when test=" YEAR_MONTH != null and YEAR_MONTH == 'YEAR' ">
			                AND TO_CHAR(R.RESULT_DATE, 'YYYY') = TO_CHAR(SYSDATE, 'YYYY')
							</when>
							<when test=" YEAR_MONTH != null and YEAR_MONTH == 'MONTH' ">
			                AND TO_CHAR(R.RESULT_DATE, 'YYYYMM') = TO_CHAR(TO_DATE( #{YEAR},'YYYY'), 'YYYYMM') 
							</when>
						</choose>		
		                AND CM.RELATION_TYPE = 'SALES'
		        )
		        GROUP BY USER_ID
		    )
		    GROUP BY USER_ID
		)
	</select>	
	
	<select id="getFaPaymentRate" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	rstMgn.getFaPaymentRate
			FA 전월대비 매출 증감분
		*/
		SELECT USER_ID 
		, GET_USER_NM( USER_ID ) 			AS USER_NM 
		, MAX( YEARLY_PAYMENT ) 			AS YEARLY_PAYMENT 
		, MAX( CONTRACT_CNT ) 				AS CONTRACT_CNT
		, SUM(MAX( YEARLY_PAYMENT )) OVER() AS TOTAL_YEARLY_PAYMENT
		, MAX( YEARLY_PAYMENT ) 
		/ SUM(MAX( YEARLY_PAYMENT )) OVER() AS PERCENT
		FROM(
			SELECT USER_ID
			, SUM(YEARLY_PAYMENT) 	AS YEARLY_PAYMENT
			,NULL AS CONTRACT_CNT
			FROM(

				SELECT DISTINCT P.USER_ID
				,CASE WHEN  TO_CHAR(R.RESULT_DATE,'YYYY') = TO_DATE( sysdate , 'YYYY') THEN P.PAYMENT ELSE 0 END 								AS YEARLY_PAYMENT /* 연간 수수료 */ 
				,CASE WHEN  TO_CHAR(R.RESULT_DATE,'YYYY') = TO_DATE( sysdate , 'YYYY') THEN DECODE( P.EXEC_TYPE,'EXEC', PAYMENT, 0) ELSE 0 END 	AS YEARLY_EXEC_PAYMENT 
				,CASE WHEN  TO_CHAR(R.RESULT_DATE,'YYYY') = TO_DATE( sysdate , 'YYYY') THEN DECODE( P.EXEC_TYPE,'EXEC', 0 ,PAYMENT) ELSE 0 END 	AS YEARLY_SALES_PAYMENT 
				FROM TBL_EXP_CONTRACT C , TBL_EXP_RESULT R , TBL_EXP_CONTRACT_MEMBER CM
				,TBL_EXP_PAYMENT P
				WHERE 1=1 
				AND C.CONTRACT_ID	= R.CONTRACT_ID 
				AND C.CONTRACT_ID	= CM.CONTRACT_ID 
				AND C.CONTRACT_ID 	= P.CONTRACT_ID 
				AND R.CONTRACT_ID 	= P.CONTRACT_ID 
				AND P.RELATION_TYPE	= CM.RELATION_TYPE
				AND C.USE_YN 		= 'Y' 	
				AND C.DEL_YN 		= 'N' 	
				AND R.USE_YN 		= 'Y' 
				AND R.DEL_YN 		= 'N'
				AND CM.USE_YN 		= 'Y' 
				AND CM.DEL_YN 		= 'N' 
				AND P.USE_YN 		= 'Y' 
				AND P.DEL_YN 		= 'N'
				AND TO_CHAR(R.RESULT_DATE,'YYYY') = TO_DATE( sysdate , 'YYYY')
				AND CM.RELATION_TYPE = 'SALES'
			)
			GROUP BY USER_ID

			UNION ALL 
		
			SELECT USER_ID
			, NULL 
			, COUNT(CONTRACT_ID) 	AS CONTRACT_CNT
			FROM(			
				SELECT DISTINCT P.USER_ID
				,C.CONTRACT_ID
				FROM TBL_EXP_CONTRACT C , TBL_EXP_RESULT R , TBL_EXP_CONTRACT_MEMBER CM
				,TBL_EXP_PAYMENT P
				WHERE 1=1 
				AND C.CONTRACT_ID	= R.CONTRACT_ID 
				AND C.CONTRACT_ID	= CM.CONTRACT_ID 
				AND C.CONTRACT_ID 	= P.CONTRACT_ID 
				AND R.CONTRACT_ID 	= P.CONTRACT_ID 
				AND P.RELATION_TYPE	= CM.RELATION_TYPE
				AND C.USE_YN 		= 'Y' 	
				AND C.DEL_YN 		= 'N' 	
				AND R.USE_YN 		= 'Y' 
				AND R.DEL_YN 		= 'N'
				AND CM.USE_YN 		= 'Y' 
				AND CM.DEL_YN 		= 'N' 
				AND P.USE_YN 		= 'Y' 
				AND P.DEL_YN 		= 'N'
				AND TO_CHAR(R.RESULT_DATE,'YYYY') = TO_DATE( sysdate , 'YYYY')
				AND CM.RELATION_TYPE = 'SALES'	
			)
			GROUP BY USER_ID
			ORDER BY USER_ID		
		)
		GROUP BY USER_ID 
		ORDER BY YEARLY_PAYMENT DESC , 	CONTRACT_CNT DESC
	</select>	
	
</mapper>
