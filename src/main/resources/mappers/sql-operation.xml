<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="operation">

	<cache />

	<!--
	운영 관리 
	 -->	
	<select id="getConsultingItem" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	operation.getConsultingItem
			컨설팅 조회 
		*/
		SELECT DISTINCT
		  CT.CONSULTING_ID
		, CT.CONSULTING_NM
		, CT.CONSULTING_TYPE
		, CT.CONSULTING_DESC
		, CASE 
			WHEN  ( SELECT COUNT(1) 
					FROM TBL_EXP_CONTRACT I 
					WHERE I.CONSULTING_ID = CT.CONSULTING_ID 
					AND I.USE_YN ='Y' AND DEL_YN='N') 
					<![CDATA[ > ]]> 0 
			THEN 'N'
			ELSE 'Y'
		END AS CAN_DEL
		FROM TBL_EXP_CONSULTING CT
		, TBL_EXP_CONTRACT R
		WHERE 1=1 
		<if test=" CONSULTING_ID != null and CONSULTING_ID != '' " >
		AND CT.CONSULTING_ID = #{CONSULTING_ID}
		</if>
		AND CT.CONSULTING_ID = R.CONSULTING_ID(+)
		ORDER BY CT.CONSULTING_NM  
	</select>	
		

	<update id="updateConsultingItem" parameterType="java.util.HashMap"  flushCache="true" >
		/*	operation.updateConsultingItem
			컨설팅 저장
		*/
		MERGE INTO TBL_EXP_CONSULTING T
		USING (
		  SELECT #{CONSULTING_ID} 	AS CONSULTING_ID,
		         #{CONSULTING_NM} 	AS CONSULTING_NM,
		         #{CONSULTING_TYPE} AS CONSULTING_TYPE,
		         #{CONSULTING_DESC} AS CONSULTING_DESC,
		         #{sessionVo.userId} AS UPDATE_USER, 
           		 GET_KRDT(SYSDATE)			AS UPDATE_DATE,
           		#{sessionVo.spCstmId} AS SP_CSTM_ID
		  FROM dual
		) S
		ON (T.CONSULTING_ID	= S.CONSULTING_ID 
		)
		WHEN MATCHED THEN
		  UPDATE SET
		         T.CONSULTING_NM 		= S.CONSULTING_NM,
		         T.CONSULTING_TYPE 		= S.CONSULTING_TYPE,
		         T.CONSULTING_DESC		= S.CONSULTING_DESC,
		         T.UPDATE_USER			= S.UPDATE_USER,
		         T.UPDATE_DATE			= S.UPDATE_DATE,
		         T.SP_CSTM_ID			= S.SP_CSTM_ID
		WHEN NOT MATCHED THEN 
    		INSERT (    CONSULTING_ID,   CONSULTING_NM,   CONSULTING_TYPE,   CONSULTING_DESC, 	UPDATE_USER,	UPDATE_DATE,	SP_CSTM_ID )
   			VALUES (  S.CONSULTING_ID, S.CONSULTING_NM, S.CONSULTING_TYPE, S.CONSULTING_DESC, S.UPDATE_USER,  S.UPDATE_DATE,  S.SP_CSTM_ID )
	</update>
	
	<delete id="deleteConsultingItem" parameterType="java.util.HashMap"  flushCache="true" >
		/*	operation.deleteConsultingItem
			컨설팅 삭제
		*/
		DELETE FROM  TBL_EXP_CONSULTING
		WHERE CONSULTING_ID	= #{CONSULTING_ID}
	</delete>

	<select id="getTeamList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	operation.getTeamList
			팀 리스트 가져오기
		*/
		SELECT
		     A.CONTRACT_ID
		    ,C.BUYER_NM
		    ,D.CONSULTING_NM
		    ,(SELECT count(*) FROM TBL_EXP_TEAM_MEMBER B WHERE A.CONTRACT_ID = B.CONTRACT_ID) AS MEMBER_CNT
		    ,TO_CHAR( A.UPDATE_DATE , 'YYYY-MM-DD' ) UPDATE_DATE
		FROM
			 TBL_EXP_TEAM 		A
			,TBL_EXP_CONTRACT 	B
			,TBL_EXP_BUYER		C
			,TBL_EXP_CONSULTING	D
		WHERE 1 = 1 
			AND A.CONTRACT_ID 	= B.CONTRACT_ID
			AND B.BUYER_ID		= C.BUYER_ID
			AND B.SP_CSTM_ID	= C.SP_CSTM_ID
			AND B.CONSULTING_ID	= D.CONSULTING_ID
			AND A.SP_CSTM_ID 	= #{sessionVo.spCstmId}			
			<if test=" searchWord != null and searchWord != '' " >
			AND (
				 		C.BUYER_NM 			LIKE '%${searchWord}%' 
					OR  D.CONSULTING_NM		LIKE '%${searchWord}%'
					OR  #{searchWord} IN (SELECT GET_USER_NM(USER_ID) FROM TBL_EXP_TEAM_MEMBER TM WHERE TM.CONTRACT_ID = B.CONTRACT_ID )
				)
			</if>
			
		ORDER BY A.UPDATE_DATE DESC			
	</select>

	<select id="getTeamMemberList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	operation.getTeamMemberList
			팀 Member 리스트 가져오기
		*/
		SELECT
		     CONTRACT_ID
		    ,USER_ID
		    ,GET_USER_NM(USER_ID) AS USER_NM
		    ,TEAM_USER_ROLE
		    ,GET_CODE_NM('TEAM_USER_ROLE', TEAM_USER_ROLE) AS TEAM_USER_ROLE_NM
		    ,(SELECT GET_CODE_NM('GRADE', GRADE) FROM TBL_EXP_USER A WHERE A.USER_ID = B.USER_ID) AS GRADE
		    ,SP_CSTM_ID
		    ,UPDATE_USER
		    ,UPDATE_DATE
		FROM
		    TBL_EXP_TEAM_MEMBER B
		WHERE 
			CONTRACT_ID = #{CONTRACT_ID}
		ORDER BY 
			TEAM_USER_ROLE DESC			
			  
   	</select>

	<select id="getWorkHistoryList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		SELECT 
		     WH_ID
		    ,USER_ID
		    ,WORK_CONTENT
		    ,UPDATE_USER
		    ,TO_CHAR( UPDATE_DATE , 'YYYY-MM-DD HH24:MI:SS' ) UPDATE_DATE 
		    ,TO_CHAR( UPDATE_DATE , 'YYYY-MM-DD' 			) YYYYMMDD 
		FROM
			TBL_EXP_WORK_HISTORY
		WHERE
				USER_ID 	= #{USER_ID}
			AND SP_CSTM_ID 	= #{sessionVo.spCstmId}
			AND UPDATE_DATE BETWEEN TO_DATE('${fromDate} 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND TO_DATE('${toDate} 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
			<if test=" searchWord != null and searchWord != '' " >
			AND WORK_CONTENT LIKE '%${searchWord}%'
			</if>
		ORDER BY 	
			UPDATE_DATE DESC	
	</select>


	<update id="saveWorkHistory">
		/*	operation.saveWorkHistory
			WORK HISTORY 저장
		*/
        INSERT INTO TBL_EXP_WORK_HISTORY (
			 WH_ID       
			,USER_ID     
			,WORK_CONTENT
		    ,UPDATE_USER 
		    ,UPDATE_DATE 
		    ,SP_CSTM_ID  
        )
        VALUES(
		    #{WH_ID       		}   
		   ,#{USER_ID     		}   
		   ,#{WORK_CONTENT		}
           ,#{sessionVo.userId 	}
           ,GET_KRDT(SYSDATE)
           ,#{sessionVo.spCstmId}
        )   
	</update>



</mapper>
