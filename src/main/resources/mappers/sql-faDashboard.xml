<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="faDashboard">

	<cache />

	<!--
	FA 대시보드 
	 --> 
	<select id="getOrgSellingPirce" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	faDashboard.getOrgSellingPirce
			당월 수수료 , 실행수수료, 영업수수료, 연간 목표 수수료 조회 
			잠재고객 / 가맹수 조회 
		*/
		SELECT MAX(#{sessionVo.userId	}) 				AS USER_ID
			, ROUND(NVL(MAX( YEARLY_PAYMENT),0),2) 		AS YEARLY_PAYMENT
			, ROUND(NVL(MAX( SUM_PAYMENT),0),2) 		AS SUM_PAYMENT
			, ROUND(NVL(MAX( EXEC_SUM_PAYMENT),0),2) 	AS EXEC_PAYMENT
			, ROUND(NVL(MAX( SALES_SUM_PAYMENT),0),2) 	AS SALES_SUM_PAYMENT
			, NVL(MAX( POTENTIAL_CUSTOMER),0)  			AS POTENTIAL_CUSTOMER
			, NVL(MAX( AFFILIATE_CNT),0) 				AS AFFILIATE_CNT
			, NVL(MAX( TARGET_PAYMENT ),0) 				AS TARGET_PAYMENT
		FROM(			
			SELECT USER_ID ,YEARLY_PAYMENT, EXEC_SUM_PAYMENT, SALES_SUM_PAYMENT , SUM_PAYMENT 
				,  	NULL AS POTENTIAL_CUSTOMER, NULL AS AFFILIATE_CNT	
				,	NULL AS TARGET_PAYMENT
			FROM (
				SELECT USER_ID
				, SUM(YEARLY_PAYMENT) 	AS YEARLY_PAYMENT
				, SUM( EXEC_PAYMENT ) 	AS EXEC_SUM_PAYMENT
				, SUM( SALES_PAYMENT ) 	AS SALES_SUM_PAYMENT
				, SUM( PAYMENT) 		AS SUM_PAYMENT
				FROM(
				
					SELECT P.USER_ID
					,CASE WHEN  TO_CHAR(R.RESULT_DATE,'YYYY') = #{CUR_YEAR_DATE} THEN P.PAYMENT ELSE 0 END 									AS YEARLY_PAYMENT /* 연간 수수료 */ 
					,CASE WHEN  TO_CHAR(R.RESULT_DATE,'YYYY') = #{CUR_YEAR_DATE} THEN DECODE( P.RELATION_TYPE,'EXECUTE', PAYMENT, 0) ELSE 0 END 	AS YEARLY_EXEC_PAYMENT 
					,CASE WHEN  TO_CHAR(R.RESULT_DATE,'YYYY') = #{CUR_YEAR_DATE} THEN DECODE( P.RELATION_TYPE,'EXECUTE', 0 ,PAYMENT) ELSE 0 END 	AS YEARLY_SALES_PAYMENT 
					,CASE WHEN  TO_CHAR(R.RESULT_DATE,'YYYY-MM') = #{CUR_MONTH_DATE} THEN P.PAYMENT  ELSE 0 END 							AS PAYMENT /* 당월수수료 */
					,CASE WHEN  TO_CHAR(R.RESULT_DATE,'YYYY-MM') = #{CUR_MONTH_DATE} THEN DECODE( P.RELATION_TYPE,'EXECUTE', PAYMENT, 0) ELSE 0 END AS  EXEC_PAYMENT /* 실행수수료 */
					,CASE WHEN  TO_CHAR(R.RESULT_DATE,'YYYY-MM') = #{CUR_MONTH_DATE} THEN DECODE( P.RELATION_TYPE,'EXECUTE', 0 ,PAYMENT) ELSE 0 END AS  SALES_PAYMENT /* 영업수수료 */
					FROM TBL_EXP_CONTRACT C , TBL_EXP_RESULT R , TBL_EXP_CONTRACT_MEMBER CM
					,TBL_EXP_PAYMENT P
					WHERE 1=1 
					AND C.CONTRACT_ID	= R.CONTRACT_ID 
					AND C.CONTRACT_ID	= CM.CONTRACT_ID 
					AND C.CONTRACT_ID 	= P.CONTRACT_ID 
					AND P.RESULT_ID 	= R.RESULT_ID 
					AND P.RELATION_TYPE	= CM.RELATION_TYPE
					AND C.USE_YN 		= 'Y' 	
					AND C.DEL_YN 		= 'N' 	
					AND R.USE_YN 		= 'Y' 
					AND R.DEL_YN 		= 'N'
					AND CM.USE_YN 		= 'Y' 
					AND CM.DEL_YN 		= 'N' 
					AND P.USE_YN 		= 'Y' 
					AND P.DEL_YN 		= 'N'
					AND TO_CHAR(R.RESULT_DATE,'YYYY') = #{CUR_YEAR_DATE}
					AND P.USER_ID = #{sessionVo.userId	}	
				)
				GROUP BY USER_ID
			)
			
			UNION ALL 
			
			SELECT	 NULL, NULL, NULL, NULL, NULL
					,SUM(CASE WHEN  CUSTOMER_TYPE  = 'POTENTIAL_CUSTOMER' THEN 1 ELSE 0 END  ) AS POTENTIAL_CUSTOMER
					,SUM(CASE WHEN  CUSTOMER_TYPE != 'POTENTIAL_CUSTOMER' THEN 1 ELSE 0 END  ) AS AFFILIATE_CNT
					,NULL
			FROM (
				SELECT DISTINCT *
				FROM(	
						SELECT DISTINCT C.BUYER_ID AS CUSTOMER_TYPE
						, B.*
						FROM TBL_EXP_BUYER B ,TBL_EXP_CONTRACT C , TBL_EXP_RESULT R, TBL_EXP_CONTRACT_MEMBER CM
						WHERE B.USE_YN = 'Y' AND B.DEL_YN = 'N' AND R.USE_YN = 'Y' AND R.DEL_YN = 'N'
						AND C.CONTRACT_ID 						= R.CONTRACT_ID
						AND TO_CHAR(R.RESULT_DATE,'YYYY-MM') 	= #{CUR_MONTH_DATE}  
						AND	B.BUYER_ID 							= C.BUYER_ID
						AND 'PRE_CONTRACT' != C.PROCESS_STATE
						AND C.CONTRACT_ID 						= CM.CONTRACT_ID
						AND CM.USER_ID 							= #{sessionVo.userId	}
						
						UNION ALL 
						
						/* 잠재 고객은 내가 등록했지만, 계약하지 못한 고객 */
						SELECT  'POTENTIAL_CUSTOMER' AS CUSTOMER_TYPE
						, B.*
						FROM TBL_EXP_BUYER B 
						WHERE 1=1 
						AND B.USE_YN 		= 'Y' 
						AND B.DEL_YN 		= 'N' 
						AND B.CREATE_USER	= #{sessionVo.userId	}
						AND B.BUYER_ID NOT IN	(
												SELECT C.BUYER_ID 
												FROM TBL_EXP_CONTRACT C
												, TBL_EXP_CONTRACT_MEMBER CM 
												WHERE 1=1
												AND C.CONTRACT_ID 	= CM.CONTRACT_ID
												AND C.USE_YN 		= 'Y' 
												AND C.DEL_YN 		= 'N'
												AND CM.USER_ID 		= #{sessionVo.userId	} 
												)
				)
			)
			
			UNION ALL 
			
			SELECT NULL, NULL, NULL, NULL , NULL, NULL, NULL, TARGET_PAYMENT
				FROM TBL_EXP_USER_CONFIG CF
				WHERE	CF.SP_CSTM_ID 	= #{sessionVo.spCstmId}
				AND		CF.USER_ID		= #{sessionVo.userId}
				AND		CF.TARGET_YEAR	= #{CUR_YEAR_DATE} 		
		)		
	</select>
	
	<update id="updateTargetPayment" parameterType="java.util.HashMap"  flushCache="true" >
		/*	faDashboard.updateTargetPayment
			FA 연간목표수수료
		*/
		MERGE INTO TBL_EXP_USER_CONFIG T
		USING (
		  SELECT #{sessionVo.spCstmId}	AS SP_CSTM_ID
		  ,		 #{sessionVo.userId} 	AS USER_ID
		  ,		 #{TARGET_YEAR} 		AS TARGET_YEAR
		  ,		 #{TARGET_PAYMENT} 		AS TARGET_PAYMENT
		  FROM DUAL
		) S
		ON (
			 	T.SP_CSTM_ID	= S.SP_CSTM_ID 
			AND T.USER_ID		= S.USER_ID 
			AND T.TARGET_YEAR	= S.TARGET_YEAR 
		)
		WHEN MATCHED THEN
			UPDATE SET
				 T.TARGET_PAYMENT = TARGET_PAYMENT
		WHEN NOT MATCHED THEN 
			INSERT ( 
				 SP_CSTM_ID
				,USER_ID
				,TARGET_YEAR
				,TARGET_PAYMENT
			) VALUES ( 
				 S.SP_CSTM_ID
				,S.USER_ID
				,S.TARGET_YEAR
				,S.TARGET_PAYMENT
			)
	</update>	
	

	<sql id="getContractedBy">
	/*
		전체 수수료 합계 추이 / 수수료 합계 추이 
	*/
		SELECT  MONTH , NULL, NULL, NULL 
		<choose>
			<when test=" UNIT_TYPE != null and UNIT_TYPE.equals('BIG') "> 
			, ROUND(NVL(SUM(MONTHLY_TOTAL_COST)/100000000,0),2)	AS MONTHLY_TOTAL_COST
			, ROUND(NVL(SUM(ONCE_TOTAL_COST)/100000000,0),2) 	AS ONCE_TOTAL_COST
			, ROUND(NVL(SUM(COWORK_TOTAL_COST)/100000000,0),2) 	AS COWORK_TOTAL_COST
			</when>
			<when test=" UNIT_TYPE != null and UNIT_TYPE.equals('SMALL') "> 
			, ROUND(NVL(SUM(MONTHLY_TOTAL_COST)/1000000,0),2)	AS MONTHLY_TOTAL_COST
			, ROUND(NVL(SUM(ONCE_TOTAL_COST)/1000000,0),2) 		AS ONCE_TOTAL_COST
			, ROUND(NVL(SUM(COWORK_TOTAL_COST)/1000000,0),2)	AS COWORK_TOTAL_COST
			</when>
		</choose>
			,SUM(MONTHLY_CNT) 	MONTHLY_CNT
			,SUM(ONCE_CNT)	 	ONCE_CNT
			,SUM(COWORK_CNT)	COWORK_CNT
		FROM(
			SELECT MONTH 
			, DECODE( CONSULTING_TYPE , 'MONTHLY'	, SUM_TOTAL_COST , 0) AS MONTHLY_TOTAL_COST , DECODE( CONSULTING_TYPE , 'MONTHLY'	, CNT , 0) AS MONTHLY_CNT
			, DECODE( CONSULTING_TYPE , 'ONCE'		, SUM_TOTAL_COST , 0) AS ONCE_TOTAL_COST	, DECODE( CONSULTING_TYPE , 'ONCE'		, CNT , 0) AS ONCE_CNT
			, DECODE( CONSULTING_TYPE , 'COWORK'	, SUM_TOTAL_COST , 0) AS COWORK_TOTAL_COST	, DECODE( CONSULTING_TYPE , 'COWORK'	, CNT , 0) AS COWORK_CNT
			FROM (	
				SELECT TO_CHAR( RESULT_DATE,'YYYY-MM') AS MONTH , CS.CONSULTING_TYPE , SUM(P.PAYMENT) SUM_TOTAL_COST ,  COUNT(DISTINCT C.CONTRACT_ID) AS CNT 
				FROM 	TBL_EXP_CONTRACT C
				,		TBL_EXP_CONSULTING CS
				,		TBL_EXP_PAYMENT P
				, 		TBL_EXP_RESULT R
				WHERE C.CONSULTING_ID  = CS.CONSULTING_ID 
				AND C.CONTRACT_ID = R.CONTRACT_ID 
				AND C.CONTRACT_ID = P.CONTRACT_ID 
				AND C.USE_YN = 'Y' AND C.DEL_YN = 'N'
				AND P.USE_YN = 'Y' AND P.DEL_YN = 'N'
				AND R.USE_YN = 'Y' AND R.DEL_YN = 'N'
				AND TO_CHAR(R.RESULT_DATE, 'YYYY') = #{CUR_YEAR_DATE} 	
				<if test = " personalSearch != null">
			        <choose>
			       	<when test='gubun != null '> 
			        	<if test=" gubun.equals('execBosu') ">
					    AND P.USER_ID	= #{sessionVo.userId	}  
					    AND P.RELATION_TYPE = 'EXECUTE'
			        	</if>
			        	<if test=" gubun.equals('salesBosu') ">
					    AND P.USER_ID	= #{sessionVo.userId	}  
					    AND P.RELATION_TYPE != 'EXECUTE'
			        	</if>
					</when>	
			       	<when test='gubun == null '> 
					    AND P.USER_ID	= #{sessionVo.userId	}  
					</when>						
					</choose>						
				</if>	
				GROUP BY TO_CHAR( RESULT_DATE,'YYYY-MM') ,CS.CONSULTING_TYPE  
				
				UNION ALL 
			
				SELECT TO_CHAR( C.CONTRACT_DATE ,'YYYY-MM') AS MONTH ,CT.CONSULTING_TYPE,  NULL, COUNT(DISTINCT C.CONTRACT_ID) AS CNT 
				FROM TBL_EXP_CONTRACT C
				,TBL_EXP_CONSULTING CT
				,TBL_EXP_USER U
				,TBL_EXP_CONTRACT_MEMBER TM
				WHERE 1=1
				AND C.USE_YN = 'Y' 		AND C.DEL_YN = 'N'
				AND U.USE_YN = 'Y'      AND U.DEL_YN = 'N'
				AND C.CONSULTING_ID = CT.CONSULTING_ID		
				AND C.USER_ID = U.USER_ID
				AND C.PROCESS_STATE != 'PRE_CONTRACT' 
				AND C.PROCESS_STATE != 'ON_CONTRACTING_APPR' 
				AND C.CONTRACT_ID = TM.CONTRACT_ID
				AND TO_CHAR(C.CONTRACT_DATE, 'YYYY') = #{CUR_YEAR_DATE} 	
				<if test = " personalSearch != null">
			        <choose>
			       	<when test='gubun != null '> 
			        	<if test=" gubun.equals('execBosu') ">
					    AND TM.USER_ID	= #{sessionVo.userId	}  
					    AND TM.RELATION_TYPE = 'EXECUTE'
			        	</if>
			        	<if test=" gubun.equals('salesBosu') ">
					    AND TM.USER_ID	= #{sessionVo.userId	}  
					    AND TM.RELATION_TYPE != 'EXECUTE'
			        	</if>
					</when>	
			       	<when test='gubun == null '> 
					    AND TM.USER_ID	= #{sessionVo.userId	}  
					</when>						
					</choose>						
				</if>				
				GROUP BY TO_CHAR( C.CONTRACT_DATE ,'YYYY-MM') ,CT.CONSULTING_TYPE
			)
		)
		GROUP BY MONTH
		ORDER BY MONTH	
	</sql>
	
	<select id="getContractedByAll" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	faDashboard.getContractedByAll
		*/
		<include refid="getContractedBy"/>
	</select>
	
	<select id="getPaymentByMonth" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	faDashboard.getPaymentByMonth
			월별 수수료 조회 ( 수수료 합계 추이 구하기 위함 )
			( 실행 수수료 , 영업 수수료 )
			( 계약체결 계약금액, 계약 종류)
		*/
		WITH MONTHS AS (
		  SELECT DISTINCT  TO_CHAR(TO_DATE( #{CUR_YEAR_DATE}||'-01-01', 'YYYY-MM-DD') + LEVEL - 1, 'YYYY-MM') AS month
		  FROM dual
		  CONNECT BY LEVEL <![CDATA[<=]]>  ADD_MONTHS(TO_DATE(#{CUR_YEAR_DATE}||'-01-01', 'YYYY-MM-DD'), 12) - TO_DATE(#{CUR_YEAR_DATE}||'-01-01', 'YYYY-MM-DD')
		)
		
		SELECT B.MONTH
		<choose>
			<when test=" UNIT_TYPE != null and UNIT_TYPE.equals('BIG') "> 
			, ROUND(NVL(MAX(A.SUM_PAYMENT)/100000000,0),2)	 		AS SUM_PAYMENT
			, ROUND(NVL(MAX(A.SUM_EXEC_PAYMENT)/100000000,0),2) 	AS SUM_EXEC_PAYMENT
			, ROUND(NVL(MAX(A.SUM_SALES_PAYMENT)/100000000,0),2) 	AS SUM_SALES_PAYMENT
			</when>
			<when test=" UNIT_TYPE != null and UNIT_TYPE.equals('SMALL') "> 
			, ROUND(NVL(MAX(A.SUM_PAYMENT)/1000000,0),2)	 		AS SUM_PAYMENT
			, ROUND(NVL(MAX(A.SUM_EXEC_PAYMENT)/1000000,0),2) 		AS SUM_EXEC_PAYMENT
			, ROUND(NVL(MAX(A.SUM_SALES_PAYMENT)/1000000,0),2) 		AS SUM_SALES_PAYMENT
			</when>
		</choose>
			, NVL(MAX(A.MONTHLY_TOTAL_COST),0)					AS MONTHLY_TOTAL_COST
			, NVL(MAX(A.ONCE_TOTAL_COST),0)						AS ONCE_TOTAL_COST
			, NVL(MAX(A.COWORK_TOTAL_COST),0)					AS COWORK_TOTAL_COST
			, NVL(MAX(A.MONTHLY_CNT),0)							AS MONTHLY_CNT
			, NVL(MAX(A.ONCE_CNT),0)							AS ONCE_CNT
			, NVL(MAX(A.COWORK_CNT),0)							AS COWORK_CNT
			, NVL((SELECT TARGET_PAYMENT FROM TBL_EXP_USER_CONFIG CF
					WHERE	CF.SP_CSTM_ID 	= #{sessionVo.spCstmId}
					AND		CF.USER_ID		= #{sessionVo.userId}
					AND		CF.TARGET_YEAR	= #{CUR_YEAR_DATE} 	
			 ),0) AS TARGET_PAYMENT
		FROM(
			SELECT 
				TO_CHAR(RESULT_DATE,'YYYY-MM') AS MONTH
				,SUM(PAYMENT) AS SUM_PAYMENT
				,SUM(EXEC_PAYMENT) AS SUM_EXEC_PAYMENT
				,SUM(SALES_PAYMENT) AS SUM_SALES_PAYMENT
				,null AS MONTHLY_TOTAL_COST
				,null AS ONCE_TOTAL_COST
				,null AS COWORK_TOTAL_COST
				,null AS MONTHLY_CNT
				,null AS ONCE_CNT
				,null AS COWORK_CNT
			FROM(					
						SELECT P.USER_ID
						,R.RESULT_DATE
						,P.PAYMENT /* 당월수수료 */
						,DECODE( P.RELATION_TYPE,'EXECUTE', PAYMENT, 0) AS  EXEC_PAYMENT /* 실행수수료 */
						,DECODE( P.RELATION_TYPE,'EXECUTE', 0 ,PAYMENT) AS  SALES_PAYMENT /* 영업수수료 */		
						FROM TBL_EXP_CONTRACT C , TBL_EXP_RESULT R
						,TBL_EXP_PAYMENT P
						WHERE C.CONTRACT_ID = R.CONTRACT_ID 
						AND C.USE_YN = 'Y' 	AND C.DEL_YN = 'N' 	AND R.USE_YN = 'Y' AND R.DEL_YN = 'N'
						AND P.USE_YN = 'Y' AND P.DEL_YN = 'N'
						AND C.CONTRACT_ID = P.CONTRACT_ID 
						AND R.RESULT_ID = P.RESULT_ID 
			        <choose>
			       	<when test='gubun != null '> 
			        	<if test=" gubun.equals('execBosu') "><!-- 실행수수료 -->
					    AND P.USER_ID	= #{sessionVo.userId	}  
					    AND P.RELATION_TYPE = 'EXECUTE'
			        	</if>
			        	<if test=" gubun.equals('salesBosu') "><!-- 영업수수료 -->
					    AND P.USER_ID	= #{sessionVo.userId	}  
					    AND P.RELATION_TYPE = 'SALES'
			        	</if>
					</when>	
			       	<when test='gubun == null '> 
					    AND P.USER_ID	= #{sessionVo.userId	}  
					</when>						
					</choose>						

						AND TO_CHAR(R.RESULT_DATE, 'YYYY') = #{CUR_YEAR_DATE}
			)
			GROUP BY TO_CHAR( RESULT_DATE,'YYYY-MM')
			
			UNION ALL 
			
			<include refid="getContractedBy"/>

		) A
		,MONTHS B 
		WHERE A.MONTH(+) = B.MONTH 
		GROUP BY B.MONTH
		ORDER BY B.MONTH	
	</select>

	<select id="getTodoList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	faDashboard.getTodoList
			FA 대시보드 TODO 리스트
		*/
		SELECT 
			 TODO_ID
			,TODO
			,EXEC_CHECK
			,TO_CHAR( UPDATE_DATE , 'MM-DD HH24:MI' ) AS UPDATE_DATE
		FROM 
		 	TBL_EXP_TODO_FA  A
		WHERE  1=1
			AND	UPDATE_USER = #{sessionVo.userId}
			AND	SP_CSTM_ID	= #{sessionVo.spCstmId}
			AND DEL_YN		= 'N'
		ORDER BY UPDATE_DATE DESC		
	</select>	
	<update id="registTodo">
		/*	faDashboard.registTodo
			FA 대시보드 TODO 등록
		*/
		INSERT INTO TBL_EXP_TODO_FA (
			 TODO_ID
			,TODO
			,EXEC_CHECK
			,UPDATE_DATE
			,UPDATE_USER
			,SP_CSTM_ID
		) VALUES (
			 #{TODO_ID		}
			,#{TODO			}
			,'N'
   			,GET_KRDT(SYSDATE)
   			,#{sessionVo.userId		}
			,#{sessionVo.spCstmId	}
		)
	</update>

	<update id="deleteTodo">
		/*	faDashboard.deleteTodo
			FA 대시보드 TODO 삭제
		*/
		UPDATE 
			TBL_EXP_TODO_FA 
		SET 
			DEL_YN = 'Y' 
		WHERE 
			TODO_ID = #{TODO_ID}
	</update>

	<update id="updateTodo">
		/*	faDashboard.updateTodo
			FA 대시보드 TODO 실행 상태 변경
		*/
		UPDATE 
			TBL_EXP_TODO_FA 
		SET 
			EXEC_CHECK = #{EXEC_CHECK}
		WHERE 
			TODO_ID = #{TODO_ID}
	</update>	

	<update id="updateTodoContent">
		/*	faDashboard.updateTodoContent
			대시보드 TODO 항목 내용 변경
		*/
		UPDATE 
			TBL_EXP_TODO_FA 
		SET 
			TODO = #{TODO}
		WHERE 
			TODO_ID = #{TODO_ID}
	</update>	

	<select id="getScheduleList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	faDashboard.getScheduleList
			FA 대시보드 예정 업무 리스트
		*/
		SELECT *
		FROM(
	        SELECT 
	         COUNT(*) OVER() LAST_DATA
	        ,DECODE( NVL(B.BUYER_NM, S.TITLE ), B.BUYER_NM ,<![CDATA['<strong>'||B.BUYER_NM || '</strong> 고객님']]> , S.TITLE)  AS TITLE
	        ,S.WORK_TYPE
	        ,GET_CODE_NM( 'SCHEDULE_WORK_TYPE', S.WORK_TYPE) AS WORK_TYPE_NM
	        ,TO_CHAR(S.SCHEDULE_DATE,'YYYY.MM.DD') 	AS SCHEDULE_DATE
	        ,S.START_TIME_HOUR 
	        ,S.START_TIME_MINUTE 
	        ,S.END_TIME_HOUR 
	        ,S.END_TIME_MINUTE 
	        ,S.START_TIME_HOUR||':'||S.START_TIME_MINUTE||' ~ '||S.END_TIME_HOUR||':'||S.END_TIME_MINUTE  AS SCHEDULE_TIME
	        ,POSITION
	        ,DESCRIPTION
	        ,B.BUYER_ID 
	        ,B.BUYER_NM
	        FROM TBL_EXP_SCHEDULE S
	        , TBL_EXP_CONTRACT C
	        , TBL_EXP_BUYER B
	       WHERE 1=1 
	       AND S.CONTRACT_ID  = C.CONTRACT_ID(+)
	       AND C.BUYER_ID = B.BUYER_ID (+)
	       AND S.SCHEDULE_DATE >= GET_KRDT(SYSDATE) - 100 /* FOR TEST */
	       AND S.USER_ID = 'jonsaram' /* sessionVo.userId */
	       AND rownum <![CDATA[ < ]]> 5
	       ORDER BY S.SCHEDULE_DATE		
       )
       WHERE 1=1
       <if test=" SEARCH_DATA != null and !SEARCH_DATA.equals('') ">
       AND (
       		TITLE 			like '%'|| #{SEARCH_DATA} ||'%'
       	OR 	WORK_TYPE_NM 	like '%'|| #{SEARCH_DATA} ||'%'
       	OR 	SCHEDULE_DATE 	like '%'|| #{SEARCH_DATA} ||'%'
       	OR 	SCHEDULE_TIME 	like '%'|| #{SEARCH_DATA} ||'%'
       	OR 	POSITION 		like '%'|| #{SEARCH_DATA} ||'%'
       	OR 	DESCRIPTION 	like '%'|| #{SEARCH_DATA} ||'%' 
       )
       </if>
	</select>
	
	<select id="getSubFolderList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	faDashboard.getSubFolderList
			FA 대시보드 기업폴더관리 하위 폴더리스트 가져오기
		*/
		SELECT
		     FOLDER_ID
		    ,FOLDER_NM
		    ,UP_FOLDER_ID
		    ,BUYER_ID
		    ,UPDATE_USER
		    ,UPDATE_DATE
		FROM
		    TBL_EXP_FOLDER
		WHERE 1=1
			AND	BUYER_ID 		= #{BUYER_ID}    
			AND UP_FOLDER_ID 	= #{FOLDER_ID}
			AND DEL_YN 			= 'N'
		ORDER BY 
			ORDER_IDX
 		
			
	</select>
	
	<select id="getFolderInfo" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	faDashboard.getFolderInfo
			FA 대시보드 기업폴더관리 폴더 정보 가져오기
		*/
		SELECT
		     FOLDER_ID
		    ,FOLDER_NM
		    ,UP_FOLDER_ID
		    ,BUYER_ID
		    ,UPDATE_USER
		    ,UPDATE_DATE
		FROM
		    TBL_EXP_FOLDER
		WHERE 1=1
			AND FOLDER_ID 	= #{FOLDER_ID}
		ORDER BY 
			ORDER_IDX
			
	</select>

	<select id="getFolderPath" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	faDashboard.getFolderInfo
			FA 대시보드 기업폴더관리 폴더 정보 가져오기
		*/
		SELECT
			 FOLDER_ID
			,FOLDER_NM
		FROM
			TBL_EXP_FOLDER
		WHERE
			DEL_YN = 'N'	
		START WITH
			FOLDER_ID = #{FOLDER_ID}
		CONNECT BY
			PRIOR UP_FOLDER_ID = FOLDER_ID
		ORDER BY LEVEL DESC  
	</select>

	
	<update id="insertFolder">
		INSERT INTO TBL_EXP_FOLDER( 
			 FOLDER_ID
			,FOLDER_NM
			,UP_FOLDER_ID
			,BUYER_ID
			,ORDER_IDX
		    ,UPDATE_DATE
		    ,UPDATE_USER
		    ,SP_CSTM_ID
		) VALUES ( 
			 #{FOLDER_ID   }
			,#{FOLDER_NM   }			
			,#{UP_FOLDER_ID}	
			,#{BUYER_ID    }
			,NVL((SELECT MAX(ORDER_IDX) + 1 FROM TBL_EXP_FOLDER WHERE UP_FOLDER_ID = #{UP_FOLDER_ID}), 1)
   			,GET_KRDT(SYSDATE)
   			,#{sessionVo.userId		}
			,#{sessionVo.spCstmId	}
		)
	</update>

	<update id="saveFolder">
		/*	faDashboard.saveFolder
			FA 대시보드 기업폴더관리 폴더 등록
		*/
		MERGE INTO TBL_EXP_FOLDER T
		USING (
		  SELECT 
		  	#{FOLDER_ID}	AS FOLDER_ID
		  FROM DUAL
		) S
		ON (
			T.FOLDER_ID	= S.FOLDER_ID 
		)
		WHEN MATCHED THEN
			UPDATE SET
				 T.FOLDER_NM = #{FOLDER_NM}
		WHEN NOT MATCHED THEN 
			INSERT ( 
				 FOLDER_ID
				,FOLDER_NM
				,UP_FOLDER_ID
				,BUYER_ID
				,ORDER_IDX
			    ,UPDATE_DATE
			    ,UPDATE_USER
			    ,SP_CSTM_ID
			) VALUES ( 
				 #{FOLDER_ID   }
				,#{FOLDER_NM   }			
				,#{UP_FOLDER_ID}	
				,#{BUYER_ID    }
				,NVL((SELECT MAX(ORDER_IDX) + 1 FROM TBL_EXP_FOLDER WHERE UP_FOLDER_ID = #{UP_FOLDER_ID}), 1)
	   			,GET_KRDT(SYSDATE)
	   			,#{sessionVo.userId		}
				,#{sessionVo.spCstmId	}
			)
	</update>	
		
		
	<select id="getShareMsgList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	faDashboard.getShareMsgList
			FA 대시보드 기업폴더관리 폴더 대화 내용 가져오기
		*/
		WITH USR AS (
		SELECT 
			 USER_ID
			,USER_NM
		FROM
			TBL_EXP_USER
		UNION	
		SELECT 
			 BUYER_ID AS USER_ID
			,BUYER_NM AS USER_NM
		FROM
			TBL_EXP_BUYER
		) 		
		SELECT
		     FOLDER_MSG_ID
		    ,CONTENT
		    ,FOLDER_ID
		    ,REGISTER_ID
		    ,REGISTER_TYPE
		    ,UPDATE_USER
		    ,(SELECT USER_NM FROM USR B WHERE A.UPDATE_USER = B.USER_ID ) AS UPDATE_USER_NM
		    ,TO_CHAR( UPDATE_DATE , 'MM-DD HH24:MI:SS' )				  AS UPDATE_DATE
		    ,UPDATE_DATE							 					  AS ODR
		FROM
		    TBL_EXP_FOLDER_MSG A
		WHERE 1=1
			AND FOLDER_ID 	= #{FOLDER_ID}   
			AND DEL_YN 		= 'N'
		ORDER BY ODR 
	</select>
		
	
	
	<update id="saveShareMsg">
		/*	faDashboard.saveFolder
			FA 대시보드 기업폴더관리 메시지 등록
		*/
		MERGE INTO TBL_EXP_FOLDER_MSG T
		USING (
		  SELECT 
		  	#{FOLDER_MSG_ID}	AS FOLDER_MSG_ID
		  FROM DUAL
		) S
		ON (
			T.FOLDER_MSG_ID	= S.FOLDER_MSG_ID 
		)
		WHEN MATCHED THEN
			UPDATE SET
				 T.CONTENT = #{CONTENT}
		WHEN NOT MATCHED THEN 
			INSERT ( 
			     FOLDER_MSG_ID
			    ,CONTENT
			    ,FOLDER_ID
			    ,REGISTER_ID
			    ,REGISTER_TYPE
			    ,UPDATE_DATE
			    ,UPDATE_USER
			    ,SP_CSTM_ID
			) VALUES ( 
				 #{FOLDER_MSG_ID }
				,#{CONTENT       }			
				,'${FOLDER_ID    }'			
				,NULL			
				,NULL			
	   			,GET_KRDT(SYSDATE)
	   			,#{sessionVo.userId		}
				,#{sessionVo.spCstmId	}
			)
	</update>	

	<update id="delShareMsg">
		/*	faDashboard.delShareMsg
			FA 대시보드 기업폴더관리 메시지 삭제
		*/
		UPDATE 
			TBL_EXP_FOLDER_MSG 
		SET 
			DEL_YN = 'Y'
		WHERE 
			FOLDER_MSG_ID = #{FOLDER_MSG_ID}
	</update>
		
	<update id="deleteFolder">
		/*	faDashboard.deleteFolder
			FA 대시보드 기업폴더관리 폴더 삭제
		*/
		UPDATE 
			TBL_EXP_FOLDER
		SET 
			DEL_YN = 'Y'
		WHERE 
			FOLDER_ID = #{FOLDER_ID}
	</update>
	

	<update id="makeBuyerFolder">
		/*	faDashboard."makeBuyerFolder"
			FA 대시보드 기업폴더관리 기업전용폴더 생성
		*/
		MERGE INTO TBL_EXP_FOLDER T
		USING (
		  SELECT 
		  	 #{BUYER_ID}	AS BUYER_ID
		  	,'BASE'			AS UP_FOLDER_ID
		  	,'0'			AS ORDER_IDX
		  FROM DUAL
		) S
		ON (
				T.BUYER_ID		= S.BUYER_ID 
			AND T.UP_FOLDER_ID	= S.UP_FOLDER_ID 
			AND T.ORDER_IDX		= S.ORDER_IDX 
		)
		WHEN NOT MATCHED THEN 
			INSERT ( 
				 FOLDER_ID
				,FOLDER_NM
				,UP_FOLDER_ID
				,BUYER_ID
				,ORDER_IDX
			    ,UPDATE_DATE
			    ,UPDATE_USER
			    ,SP_CSTM_ID
			) VALUES ( 
				 #{FOLDER_ID	}
				,#{FOLDER_NM	}					
				,'BASE'	
				,#{BUYER_ID    }
				,0
	   			,GET_KRDT(SYSDATE)
	   			,#{sessionVo.userId		}
				,#{sessionVo.spCstmId	}
			)
	</update>	
	
	<select id="getBuyerFolder" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	faDashboard.getFolderInfo
			FA 대시보드 기업폴더관리 기업 전용 폴더 정보 가져오기
		*/
		SELECT
			 FOLDER_ID
			,FOLDER_NM
		FROM
			TBL_EXP_FOLDER
		WHERE 1=1
			AND BUYER_ID 	 = #{BUYER_ID}
			AND UP_FOLDER_ID = 'BASE'
			AND ORDER_IDX 	 = '0'
			AND DEL_YN 		 = 'N'
	</select>
		
</mapper>