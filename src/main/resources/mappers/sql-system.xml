<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="system">

	<cache />

	<!--
	SP CUSTOM 관리 
	 -->	
	<select id="getSpCustomerList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	system.getSpCustomerList
			SP CUSTOMER 리스트 조회 
		*/
		SELECT SP_CSTM_ID 
		,SP_CSTM_NM
		,SP_CSTM_DESC
		,USE_YN
		,DEL_YN
		,UPDATE_USER
		,TO_CHAR( UPDATE_DATE , 'YYYY-MM-DD HH24:MI:SS' ) UPDATE_DATE 
		FROM TBL_EXP_SP_CSTM T
		WHERE 1 = 1
	</select>
	
	<update id="updateSpCustomer" parameterType="java.util.HashMap"  flushCache="true" >
		/*	system.updateSpCustomer
			SP CUSTOMER  저장
		*/
		MERGE INTO TBL_EXP_SP_CSTM T
		USING (
		  SELECT #{sessionVo.spCstmId} AS SP_CSTM_NM,
		         #{SP_CSTM_DESC} AS SP_CSTM_DESC,
		         #{USE_YN} AS USE_YN,
		         #{DEL_YN} AS DEL_YN,
		         #{sessionVo.userId} AS UPDATE_USER,
		         SYSDATE AS UPDATE_DATE
		  FROM dual
		) S
		ON (T.SP_CSTM_ID = S.SP_CSTM_ID)
		WHEN MATCHED THEN
		  UPDATE SET
		    T.SP_CSTM_NM = S.SP_CSTM_NM,
		    T.SP_CSTM_DESC = S.SP_CSTM_DESC,
		    T.USE_YN = S.USE_YN,
		    T.DEL_YN = S.DEL_YN,
		    T.UPDATE_USER = S.UPDATE_USER,
		    T.UPDATE_DATE = S.UPDATE_DATE
		WHEN NOT MATCHED THEN 
    		INSERT (SP_CSTM_ID,SP_CSTM_NM,SP_CSTM_DESC,USE_YN,DEL_YN,UPDATE_USER,UPDATE_DATE)
		  	VALUES (S.SP_CSTM_ID,S.SP_CSTM_NM,S.SP_CSTM_DESC,S.USE_YN,S.DEL_YN,S.UPDATE_USER,S.UPDATE_DATE)
	</update>
	
	<delete id="deleteSpCustomer" parameterType="java.util.HashMap"  flushCache="true" >
		/*	system.deleteSpCustomer
			SP CUSTOMER 삭제
		*/
		DELETE FROM TBL_EXP_SP_CSTM 
		WHERE SP_CSTM_ID = #{sessionVo.spCstmId}
	</delete>
	
	<!--
	MENU 관리 
	 -->	
	<select id="getMenuList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	system.getMenuList
			메뉴 리스트 조회 
		*/
		SELECT T.SP_CSTM_ID
			,T.MENU_ID 
			,T.MENU_NM
			,T.MENU_DESC
			,T.PARENT_MENU_ID
			,P.MENU_NM AS PARENT_MENU_NM
			,P.MENU_DESC AS PARENT_MENU_DESC
			,T.MENU_DEPTH
			,T.PARAMETER
			,T.PAGE_ID
			,T.USE_YN
			,T.DEL_YN
			,T.UPDATE_USER
			,TO_CHAR( T.UPDATE_DATE , 'YYYY-MM-DD HH24:MI:SS' ) UPDATE_DATE 
			,T.SORT_ORDER
			,(  MAX(T.SORT_ORDER) over( PARTITION BY NVL(T.PARENT_MENU_ID,T.MENU_ID ) ) )+10 AS NEXT_SORT_ORDER
			,(  MAX(DECODE( T.MENU_DEPTH, '0',T.SORT_ORDER,'0')) over( ) )+100 AS NEXT_ROOT_SORT_ORDER			
			,CASE  
				WHEN EXISTS (
					            SELECT 1 
					            FROM TBL_EXP_MENU CHILD 
					            WHERE CHILD.PARENT_MENU_ID = T.MENU_ID
					            
							) 	THEN 'Y'
		        				ELSE 'N'
		    END AS HAS_CHILD
		FROM TBL_EXP_MENU T
		,TBL_EXP_MENU P
		,(	SELECT * FROM TBL_EXP_ROLEMENU RM WHERE 
			RM.ROLE_ID IN (
			SELECT ROLE_ID FROM TBL_EXP_AUTH WHERE USER_ID = #{sessionVo.userId}
			)
		 ) RM		
		WHERE 1 = 1 
		AND T.SP_CSTM_ID = P.SP_CSTM_ID(+)
		AND T.PARENT_MENU_ID = P.MENU_ID(+)
		AND T.MENU_ID = RM.MENU_ID
		AND RM.AUTH_TYPE IN ('A', 'R')
		<if test=" MENU_NM != null and !MENU_NM.equals('') ">
		AND T.MENU_NM like '%' || #{MENU_NM} || '%'
		</if>
		<if test=" PARENT_MENU_ID != null and !PARENT_MENU_ID.equals('') ">
		AND T.PARENT_MENU_ID like  '%' || #{PARENT_MENU_ID} || '%'
		</if>
		<if test=" MENU_DEPTH != null and !MENU_DEPTH.equals('') ">
		AND T.MENU_DEPTH = #{MENU_DEPTH}
		</if>
		<if test=" MENU_DESC != null and !MENU_DESC.equals('') ">
		AND T.MENU_DESC like '%' || #{MENU_DESC} || '%'
		</if>
		<if test=" PAGE_ID != null and !PAGE_ID.equals('') ">
		AND T.PAGE_ID like '%' || #{PAGE_ID} || '%'
		</if>
		<if test="USE_YN != null and !USE_YN.equals('') ">
		AND T.USE_YN = #{USE_YN}
		</if>
		<if test=" DEL_YN != null and !DEL_YN.equals('') ">
		AND T.DEL_YN = #{DEL_YN}
		</if>
		<if test=" SORT_ORDER != null and !SORT_ORDER.equals('') ">
		AND T.SORT_ORDER = #{SORT_ORDER}
		</if>
<!--  		AND T.DEL_YN = 'N'
		AND T.USE_YN = 'Y' -->
		ORDER BY SORT_ORDER
	</select>
		
	<update id="updateMenu" parameterType="java.util.HashMap"  flushCache="true" >
		/*	system.updateMenu
			메뉴 저장
		*/
		MERGE INTO TBL_EXP_MENU T
		USING (
		  SELECT #{sessionVo.spCstmId} AS SP_CSTM_ID,
		         #{MENU_ID} AS MENU_ID,
		         #{MENU_NM} AS MENU_NM,
		         #{PARENT_MENU_ID} AS PARENT_MENU_ID,
		         #{MENU_DEPTH} AS MENU_DEPTH,
		         #{MENU_DESC} AS MENU_DESC,
		         #{PARAMETER} AS PARAMETER,
		         #{PAGE_ID} AS PAGE_ID,
		         NVL(#{USE_YN},'Y') AS USE_YN,
		         NVL(#{DEL_YN},'N') AS DEL_YN,
		         NVL(TO_NUMBER(#{SORT_ORDER}), 100) AS SORT_ORDER,
		         #{sessionVo.userId} AS UPDATE_USER,
		         SYSDATE AS UPDATE_DATE
		  FROM dual
		) S
		ON (T.SP_CSTM_ID = S.SP_CSTM_ID
		AND T.MENU_ID = S.MENU_ID
		)
		WHEN MATCHED THEN
		  UPDATE SET
		    T.MENU_NM = S.MENU_NM,
		    T.PARENT_MENU_ID = S.PARENT_MENU_ID,
		    T.MENU_DEPTH = S.MENU_DEPTH,
		    T.MENU_DESC = S.MENU_DESC,
		    T.PARAMETER = S.PARAMETER,
		    T.PAGE_ID = S.PAGE_ID,
		    T.USE_YN = S.USE_YN,
		    T.DEL_YN = S.DEL_YN,
		    T.SORT_ORDER = S.SORT_ORDER,
		    T.UPDATE_USER = S.UPDATE_USER,
		    T.UPDATE_DATE = S.UPDATE_DATE
		WHEN NOT MATCHED THEN 
		  INSERT (  SP_CSTM_ID,   MENU_ID,   MENU_NM,   PARENT_MENU_ID,   MENU_DEPTH,   MENU_DESC,   PAGE_ID,   PARAMETER,   USE_YN,   DEL_YN,   SORT_ORDER,   UPDATE_USER,   UPDATE_DATE)
		  VALUES (S.SP_CSTM_ID, S.MENU_ID, S.MENU_NM, S.PARENT_MENU_ID, S.MENU_DEPTH, S.MENU_DESC, S.PAGE_ID, S.PARAMETER, S.USE_YN, S.DEL_YN, S.SORT_ORDER, S.UPDATE_USER, S.UPDATE_DATE)
	</update>
	
	<delete id="deleteMenu" parameterType="java.util.HashMap"  flushCache="true" >
		/*	system.deleteMenu
			메뉴 삭제
		*/
		UPDATE TBL_EXP_MENU
		SET DEL_YN = 'Y',
		USE_YN		='N',
		UPDATE_USER = 'system',
		UPDATE_DATE = SYSDATE 
		WHERE SP_CSTM_ID = #{sessionVo.spCstmId} 
		AND MENU_ID = #{MENU_ID} 
	</delete>

	<!--
	CODE 관리 
	 -->	
	<select id="getGrpCodeList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	system.getGrpCodeList
			그룹 코드 리스트 조회 
		*/
		SELECT 
		 GRP_CODE_ID
		,GRP_CODE_NM
		,CODE_DESC
		,USE_YN
		,DEL_YN
		,SORT_ORDER
		,UPDATE_USER
		,TO_CHAR( UPDATE_DATE , 'YYYY-MM-DD HH24:MI:SS' ) UPDATE_DATE
		,( SELECT COUNT(*) FROM TBL_EXP_CODE I WHERE I.GRP_CODE_ID = T.GRP_CODE_ID ) TBL_EXP_CODE_CNT
		,(  MAX(T.SORT_ORDER) over() )+100 AS NEXT_SORT_ORDER
		FROM TBL_EXP_GRPCODE T
		WHERE 1 = 1
		<if test=" GRP_CODE_ID != null and !GRP_CODE_ID.equals('') ">
		AND T.GRP_CODE_ID like '%' || #{GRP_CODE_ID} || '%'
		</if>
		<if test=" CODE_NM != null and !CODE_NM.equals('') ">
		AND T.GRP_CODE_NM like '%' || #{CODE_NM} || '%'
		</if>
		<if test=" CODE_DESC != null and !CODE_DESC.equals('') ">
		AND T.CODE_DESC like '%' || #{CODE_DESC} || '%'
		</if>
		<if test=" S_USE_YN != null and !S_USE_YN.equals('') ">
		AND T.USE_YN = #{S_USE_YN}
		</if>
		<if test=" S_DEL_YN != null and !S_DEL_YN.equals('') ">
		AND T.DEL_YN = #{S_DEL_YN}
		</if>
		<if test=" DEL_YN != null and !DEL_YN.equals('') and !DEL_YN.equals('ALL') ">
		AND T.DEL_YN = #{DEL_YN}
		</if>
		<if test=" GRP_CODE != null and !GRP_CODE.equals('') ">
		AND ( T.GRP_CODE_ID like '%' || #{GRP_CODE} || '%'
		   OR T.GRP_CODE_NM like '%' || #{GRP_CODE} || '%'
		   OR T.CODE_DESC 	like '%' || #{GRP_CODE} || '%'
		)
		</if>
		
		ORDER BY SORT_ORDER
	</select>
	
	<select id="getCodeList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	system.getCodeList
			코드 리스트 조회 
		*/
		SELECT *
		FROM (
		SELECT 
		T.GRP_CODE_ID
		,( SELECT GRP_CODE_NM 
			FROM TBL_EXP_GRPCODE I 
			WHERE I.GRP_CODE_ID = T.GRP_CODE_ID) AS GRP_CODE_NM
		,T.CODE_ID
		,T.CODE_NM
		,T.CODE_DESC
		,T.USE_YN
		,T.DEL_YN
		,T.SORT_ORDER T_SORT_ORDER
		,T.UPDATE_USER
		,TO_CHAR( T.UPDATE_DATE , 'YYYY-MM-DD HH24:MI:SS' ) UPDATE_DATE
		 ,(  MAX(T.SORT_ORDER) over( PARTITION BY NVL(T.GRP_CODE_ID, T.CODE_ID ) ) )+10 AS NEXT_SORT_ORDER
		 ,P.SORT_ORDER P_SORT_ORDER
         ,T.ATTR1
         ,T.ATTR2
		FROM TBL_EXP_CODE T,
		TBL_EXP_GRPCODE P 
		WHERE T.GRP_CODE_ID = P.GRP_CODE_ID
		<if test=" GRP_CODE_ID != null and !GRP_CODE_ID.equals('') ">
		AND T.GRP_CODE_ID = #{GRP_CODE_ID}
		</if>
		<if test=" CODE_ID != null and !CODE_ID.equals('') ">
		AND T.CODE_ID = #{CODE_ID} 
		</if>
		<if test=" CODE_NM != null and !CODE_NM.equals('') ">
		AND T.CODE_NM like '%' || #{CODE_NM} || '%'
		</if>
		<if test=" CODE_DESC != null and !CODE_DESC.equals('') ">
		AND T.CODE_DESC like '%' || #{CODE_DESC} || '%'
		</if>
		<if test=" S_USE_YN != null and !S_USE_YN.equals('') ">
		AND T.USE_YN = #{S_USE_YN}
		</if>
		<if test=" S_DEL_YN != null and !S_DEL_YN.equals('') ">
		AND T.DEL_YN = #{S_DEL_YN}
		</if>
		<if test=" DEL_YN != null and !DEL_YN.equals('')  and !DEL_YN.equals('ALL') ">
		AND T.DEL_YN = #{DEL_YN}
		</if>
		) T
		WHERE 1=1
		<if test=" GRP_CODE != null and !GRP_CODE.equals('') ">
		AND ( T.GRP_CODE_ID like '%' || #{GRP_CODE} || '%'
		   OR T.GRP_CODE_NM like '%' || #{GRP_CODE} || '%'
		)
		</if>
		<if test=" CODE != null and !CODE.equals('') ">
		AND ( T.CODE_ID like '%' || #{CODE} || '%'
		   OR T.CODE_NM like '%' || #{CODE} || '%'
		   OR T.CODE_DESC like '%' || #{CODE} || '%'
		) 
		</if>
		ORDER BY P_SORT_ORDER , T_SORT_ORDER	
	</select>

	<update id="updateGrpCode" parameterType="java.util.HashMap"  flushCache="true" >
		/*	system.updateGrpCode
			그룹 코드 저장
		*/
		MERGE INTO TBL_EXP_GRPCODE T
		USING (
		  SELECT #{GRP_CODE_ID} AS GRP_CODE_ID,
				 #{GRP_CODE_NM} AS GRP_CODE_NM,
				 #{CODE_DESC} 	AS CODE_DESC,
				 #{USE_YN} 		AS USE_YN,
				 #{DEL_YN} 		AS DEL_YN,
				 #{SORT_ORDER} 	AS SORT_ORDER,
				 #{sessionVo.userId}	AS UPDATE_USER,
				 SYSDATE 		AS UPDATE_DATE 
		  FROM dual
		) S
		ON (T.GRP_CODE_ID = S.GRP_CODE_ID)
		WHEN MATCHED THEN
		  UPDATE SET
			T.GRP_CODE_NM  =S.GRP_CODE_NM,  
			T.CODE_DESC    =S.CODE_DESC,    
			T.USE_YN       =S.USE_YN,       
			T.DEL_YN       =S.DEL_YN,       
			T.SORT_ORDER   =S.SORT_ORDER,   
			T.UPDATE_USER  =S.UPDATE_USER,  
			T.UPDATE_DATE  =S.UPDATE_DATE   
 		WHEN NOT MATCHED THEN 
		  INSERT (  GRP_CODE_ID,   GRP_CODE_NM,   CODE_DESC,   USE_YN,   DEL_YN,   SORT_ORDER,   UPDATE_USER,   UPDATE_DATE) 
		  VALUES (S.GRP_CODE_ID, S.GRP_CODE_NM, S.CODE_DESC, S.USE_YN, S.DEL_YN, S.SORT_ORDER, S.UPDATE_USER, S.UPDATE_DATE)
	</update>

	<update id="updateCode" parameterType="java.util.HashMap"  flushCache="true" >
		/*	system.updateCode
			코드 저장
		*/
		MERGE INTO TBL_EXP_CODE T
		USING (
		  SELECT #{GRP_CODE_ID} AS GRP_CODE_ID, 
				 #{CODE_ID} 	AS CODE_ID, 
				 #{CODE_NM} 	AS CODE_NM, 
				 #{CODE_DESC}	AS CODE_DESC,   
				 #{USE_YN}		AS USE_YN,      
				 #{DEL_YN}		AS DEL_YN,      
				 #{SORT_ORDER} 	AS SORT_ORDER,  
				 #{sessionVo.userId}		AS UPDATE_USER, 
				 SYSDATE		AS UPDATE_DATE  
		  FROM dual
		) S
		ON (T.GRP_CODE_ID = S.GRP_CODE_ID
		AND T.CODE_ID	  = S.CODE_ID)
		WHEN MATCHED THEN
		  UPDATE SET
		  		T.CODE_NM		= S.CODE_NM,
				T.CODE_DESC		= S.CODE_DESC, 
				T.USE_YN		= S.USE_YN,    
				T.DEL_YN		= S.DEL_YN,    
				T.SORT_ORDER 	= S.SORT_ORDER,
				T.UPDATE_USER	= S.UPDATE_USER,
				T.UPDATE_DATE	= S.UPDATE_DATE

		WHEN NOT MATCHED THEN 
		  INSERT (  GRP_CODE_ID,  CODE_ID,  CODE_NM,  CODE_DESC,  USE_YN,  DEL_YN,  SORT_ORDER,  UPDATE_USER,  UPDATE_DATE) 
		  VALUES (S.GRP_CODE_ID,S.CODE_ID,S.CODE_NM,S.CODE_DESC,S.USE_YN,S.DEL_YN,S.SORT_ORDER,S.UPDATE_USER,S.UPDATE_DATE) 
 	</update>
 	
	<delete id="deleteGrpCode" parameterType="java.util.HashMap"  flushCache="true" >
		/*	system.deleteGrpCode
			그룹 코드 삭제
		*/
		DELETE FROM TBL_EXP_GRPCODE 
		WHERE GRP_CODE_ID = #{GRP_CODE_ID} 
	</delete>

	<delete id="deleteCode" parameterType="java.util.HashMap"  flushCache="true" >
		/*	system.deleteCode
			코드 삭제
		*/
		DELETE FROM TBL_EXP_CODE 
		WHERE GRP_CODE_ID 	= #{GRP_CODE_ID} 
		AND 	CODE_ID 	= #{CODE_ID} 
	</delete>

	<!--
	ROLE 관리 
	 -->	
	<select id="getRoleList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	system.getRoleList
			Role 리스트 조회 
		*/
		SELECT SP_CSTM_ID 
		,ROLE_ID
		,ROLE_NM
		,ROLE_DESC
		,USE_YN
		,DEL_YN
		,SORT_ORDER
		,UPDATE_USER
		,TO_CHAR( UPDATE_DATE , 'YYYY-MM-DD HH24:MI:SS' ) UPDATE_DATE 
		FROM TBL_EXP_ROLE T
		WHERE 1 = 1
		<if test=" DEL_YN != null and !DEL_YN.equals('') ">
		AND T.DEL_YN = #{DEL_YN}
		</if>
		
		ORDER BY SORT_ORDER
	</select>
	
	<update id="updateRole" parameterType="java.util.HashMap"  flushCache="true" >
		/*	system.updateRole
			Role  저장
		*/
		MERGE INTO TBL_EXP_ROLE T
		USING (
		  SELECT #{sessionVo.spCstmId} AS SP_CSTM_ID,
		         #{ROLE_ID} AS ROLE_ID,
		         #{ROLE_NM} AS ROLE_NM,
		         #{ROLE_DESC} AS ROLE_DESC,
		         #{USE_YN} AS USE_YN,
		         #{DEL_YN} AS DEL_YN,
		         #{SORT_ORDER} AS SORT_ORDER,
		         #{sessionVo.userId} AS UPDATE_USER,
		         SYSDATE AS UPDATE_DATE
		  FROM dual
		) S
		ON (T.SP_CSTM_ID	= S.SP_CSTM_ID
		AND T.ROLE_ID 		= S.ROLE_ID
		)
		WHEN MATCHED THEN
		  UPDATE SET
		    T.ROLE_NM = S.ROLE_NM,
		    T.ROLE_DESC = S.ROLE_DESC,
		    T.USE_YN = S.USE_YN,
		    T.DEL_YN = S.DEL_YN,
		    T.SORT_ORDER = S.SORT_ORDER,
		    T.UPDATE_USER = S.UPDATE_USER,
		    T.UPDATE_DATE = S.UPDATE_DATE
		WHEN NOT MATCHED THEN 
    		INSERT (  SP_CSTM_ID,   ROLE_ID,   ROLE_NM,   ROLE_DESC,   USE_YN,   DEL_YN,   SORT_ORDER,   UPDATE_USER,   UPDATE_DATE )
   			VALUES (S.SP_CSTM_ID, S.ROLE_ID, S.ROLE_NM, S.ROLE_DESC, S.USE_YN, S.DEL_YN, S.SORT_ORDER, S.UPDATE_USER, S.UPDATE_DATE )
	</update>

	<delete id="deleteRoleMenu" parameterType="java.util.HashMap"  flushCache="true" >
		/*	system.deleteRoleMenu
			Role 삭제
		*/
		DELETE FROM TBL_EXP_ROLEMENU 
		WHERE SP_CSTM_ID = #{sessionVo.spCstmId}
		AND	  ROLE_ID	 = #{ROLE_ID}
	</delete>
		
	<select id="setRoleMenuSeries" statementType="CALLABLE" parameterType="java.util.HashMap" flushCache="true">
	    <!-- system.setRoleMenuSeries
	         권한 추가 시 실행
	         권한 * 메뉴를 해당 TBL_EXP_ROLEMENU 테이블에 자동 입력
	    -->
	    { CALL
		    DECLARE
		    
		        p_ROLE_ID	VARCHAR2(30);
        		v_count     NUMBER;
		        
		    BEGIN
		    
		        p_ROLE_ID	:= #{ROLE_ID};
		    
		        SELECT COUNT(*)
		        INTO v_count
		        FROM TBL_EXP_ROLEMENU
		        WHERE ROLE_ID = p_ROLE_ID;
		    
		    	IF v_count = 0 THEN
		    	
					INSERT INTO TBL_EXP_ROLEMENU
					SELECT SP_CSTM_ID, ROLE_ID, MENU_ID, AUTH_TYPE
					FROM(
						SELECT DISTINCT R.SP_CSTM_ID, R.ROLE_ID, M.MENU_ID, 'R' AS AUTH_TYPE, M.SORT_ORDER
						FROM TBL_EXP_ROLE R,
						TBL_EXP_MENU M
						WHERE R.ROLE_ID		=	p_ROLE_ID 
						AND R.SP_CSTM_ID 	= 	M.SP_CSTM_ID
						AND R.USE_YN = 'Y'  AND R.DEL_YN = 'N'
						ORDER BY M.SORT_ORDER 
					);
					
					COMMIT;
					
        		END IF;
		    END
	    }
	</select>	
	
	<delete id="deleteRole" parameterType="java.util.HashMap"  flushCache="true" >
		/*	system.deleteRole
			Role 삭제
		*/
		DELETE FROM TBL_EXP_ROLE 
		WHERE SP_CSTM_ID = #{sessionVo.spCstmId}
		AND	  ROLE_ID	 = #{ROLE_ID}
	</delete>
	

	<!--
	USER 관리 
	 -->	
	<select id="getUser" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	system.getUser
			User 조회 
		*/
		SELECT U.SP_CSTM_ID 
			,U.USER_ID
			,U.USER_NM
			,U.USER_DESC
			,U.E_MAIL
			,U.PHONE_NUM
			,U.STATE
			,GET_CODE_NM('USER_STATE', U.STATE)		AS STATE_NM
			,U.UPDATE_USER
			,TO_CHAR( U.UPDATE_DATE , 'YYYY-MM-DD HH24:MI:SS' ) UPDATE_DATE 
	        ,U.USE_YN
	        ,U.DEL_YN
			,U.SURETY_INSURANCE
			,U.GENDER
			,U.SALES_TYPE
			,GET_CODE_NM('SALES_TYPE', SALES_TYPE)		AS SALES_TYPE_NM
	        ,U.RECOMMENDER_ID
	        ,GET_CODE_NM('USER_ID', RECOMMENDER_ID)		AS RECOMMENDER_NM 
	        ,ROLE
	        ,GET_CODE_NM('USER_ROLE',U.ROLE) 			AS ROLE_NM
	        ,GRADE
	        ,GET_CODE_NM('GRADE',U.GRADE) 				AS GRADE_NM
		FROM TBL_EXP_USER U
		WHERE 1 = 1		
		<if test=" USER_ID != null and !USER_ID.equals('') ">
		AND U.USER_ID = #{USER_ID}
		</if>
		<if test=" STATE != null and !STATE.equals('') ">
		AND U.STATE = #{STATE}
		</if>
		AND U.USE_YN = 'Y'
		AND U.DEL_YN = 'N'
	</select>	
	
	<select id="getUserList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	system.getUserList
			User 리스트 조회 
		*/
		SELECT U.SP_CSTM_ID 
			,U.USER_ID
			,U.USER_NM
			,U.USER_DESC
			,U.E_MAIL
			,U.PHONE_NUM
			,U.STATE
			,GET_CODE_NM('USER_STATE', U.STATE)		AS STATE_NM
			,U.UPDATE_USER
			,TO_CHAR( U.UPDATE_DATE , 'YYYY-MM-DD HH24:MI:SS' ) UPDATE_DATE 
	        ,A.ROLE_ID  
	        ,R.ROLE_NM 
	        ,R.ROLE_DESC
	        ,U.USE_YN
	        ,U.DEL_YN
			,U.SURETY_INSURANCE
			,U.GENDER
			,U.SALES_TYPE
			,GET_CODE_NM('SALES_TYPE', SALES_TYPE)		AS SALES_TYPE_NM
	        ,U.RECOMMENDER_ID
	        ,GET_CODE_NM('USER_ID', RECOMMENDER_ID)		AS RECOMMENDER_NM 
		FROM TBL_EXP_USER U
        ,TBL_EXP_AUTH A
        ,TBL_EXP_ROLE R
		WHERE 1 = 1		
		AND U.SP_CSTM_ID = A.SP_CSTM_ID
		AND U.SP_CSTM_ID = R.SP_CSTM_ID
        AND U.USER_ID = A.USER_ID
        AND R.ROLE_ID = A.ROLE_ID 
		<if test=" USER_ID != null and !USER_ID.equals('') ">
		AND U.USER_ID = #{USER_ID}
		</if>
		<if test=" STATE != null and !STATE.equals('') ">
		AND U.STATE = #{STATE}
		</if>
		<if test=" DEL_YN != null and !DEL_YN.equals('') ">
		AND U.STATE = DECODE( #{DEL_YN}, 'Y', 'DELETED' ,'N', 'INUSE',  U.STATE) 
		</if>
        ORDER BY U.USER_ID, A.ROLE_ID
	</select>
	
	
	<update id="updateUserImg" parameterType="java.util.HashMap"  flushCache="true" >
		/*	system.updateUserImg
			사용자 이미지 변경
		*/
		UPDATE TBL_EXP_USER
		SET PIC_NUM = #{PIC_NUM}  
		WHERE SP_CSTM_ID = #{sessionVo.spCstmId}
		AND	  USER_ID	 = #{USER_ID}
	</update>
	
	<update id="updateUser" parameterType="java.util.HashMap"  flushCache="true" >
		/*	system.updateUser
			User  저장
		*/
		MERGE INTO TBL_EXP_USER T
		USING (
		  SELECT #{sessionVo.spCstmId} 	AS SP_CSTM_ID,
		         #{USER_ID} 	AS USER_ID,
		         #{USER_NM} 	AS USER_NM,
		         #{USER_DESC} 	AS USER_DESC,
		         #{E_MAIL} 		AS E_MAIL,
		         #{PHONE_NUM} 	AS PHONE_NUM,
		         'INUSE' 		AS STATE,
		         #{USE_YN}	 	AS USE_YN,
		         #{DEL_YN} 		AS DEL_YN,
		         #{sessionVo.userId}	AS UPDATE_USER,
		         SYSDATE 		AS UPDATE_DATE
		  FROM dual
		) S
		ON (T.SP_CSTM_ID	= S.SP_CSTM_ID
		AND T.USER_ID 		= S.USER_ID
		)
		WHEN MATCHED THEN
		  UPDATE SET
		    T.USER_NM 		= S.USER_NM,
		    T.USER_DESC 	= S.USER_DESC,
		    T.E_MAIL 		= S.E_MAIL,
		    T.PHONE_NUM 	= S.PHONE_NUM,
		    T.USE_YN 		= S.USE_YN,
		    T.DEL_YN 		= S.DEL_YN,
		    T.UPDATE_USER 	= S.UPDATE_USER,
		    T.UPDATE_DATE 	= S.UPDATE_DATE
		WHEN NOT MATCHED THEN 
    		INSERT (  SP_CSTM_ID,   USER_ID,   USER_NM,   USER_DESC,   E_MAIL,   PHONE_NUM,   USE_YN,   DEL_YN,  UPDATE_USER,   UPDATE_DATE  , USER_PW)
   			VALUES (S.SP_CSTM_ID, S.USER_ID, S.USER_NM, S.USER_DESC, S.E_MAIL, S.PHONE_NUM, S.USE_YN, S.DEL_YN, S.UPDATE_USER, S.UPDATE_DATE , '1234')
	</update>
	
	<delete id="deleteUser" parameterType="java.util.HashMap"  flushCache="true" >
		/*	system.deleteUser
			User 삭제
		*/
		UPDATE TBL_EXP_USER
		SET STATE = 'DELETED'
		WHERE SP_CSTM_ID = #{sessionVo.spCstmId} 
		AND	  USER_ID	 = #{USER_ID}
	</delete>
	
	<update id="updateUserPwd" parameterType="java.util.HashMap"  flushCache="true" >
		/*	system.updateUserPwd
			로그인 비밀번호 수정
		*/
		UPDATE TBL_EXP_USER
		SET USER_PW = #{NEW_PWD}
		WHERE SP_CSTM_ID 	= #{sessionVo.spCstmId} 
		AND	  USER_ID	 	= #{USER_ID}
		AND   USER_PW		= #{CURRENT_PWD}		
	</update>	
	
	<!--
	권한매핑 관리 ( 사용자 - 권한 )
	 -->	
	<select id="getAuthList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	system.getAuthList
			권한매핑 리스트 조회 
		*/
		SELECT SP_CSTM_ID 
		,USER_ID
		,ROLE_ID
		FROM TBL_EXP_AUTH T
		WHERE 1 = 1
	</select>
	
	<update id="updateAuth" parameterType="java.util.HashMap"  flushCache="true" >
		/*	system.updateAuth
			권한 매핑 Auth  저장
		*/
		MERGE INTO TBL_EXP_AUTH T
		USING (
		  SELECT #{sessionVo.spCstmId}	AS SP_CSTM_ID
				,#{USER_ID} 	AS USER_ID
				,#{ROLE_ID} 	AS ROLE_ID
		  FROM dual
		) S
		ON (T.SP_CSTM_ID	= S.SP_CSTM_ID
		AND T.USER_ID 		= S.USER_ID
		)
		WHEN MATCHED THEN
		  UPDATE SET
		    T.ROLE_ID 		= S.ROLE_ID
		WHEN NOT MATCHED THEN 
    		INSERT (  SP_CSTM_ID,   USER_ID,   ROLE_ID)
   			VALUES (S.SP_CSTM_ID, S.USER_ID, S.ROLE_ID)
	</update>
	
	<delete id="deleteAuth" parameterType="java.util.HashMap"  flushCache="true" >
		/*	system.deleteAuth
			권한매핑 Auth 삭제
		*/
		DELETE FROM TBL_EXP_AUTH 
		WHERE SP_CSTM_ID = #{sessionVo.spCstmId}
		AND	  USER_ID	 = #{sessionVo.userId}
	</delete>
	
	<!--
	롤/매뉴 매핑 관리
	 -->	
	<select id="getRoleMenuMapList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	system.getRoleMenuMapList
			권한매핑 리스트 조회 
		*/
		SELECT  
		     NVL(RM.SP_CSTM_ID,M.SP_CSTM_ID) AS SP_CSTM_ID
	        ,NVL(RM.ROLE_ID, R.ROLE_ID) AS ROLE_ID
	        ,R.ROLE_NM,R.ROLE_DESC
	        ,NVL(RM.MENU_ID, M.MENU_ID) AS MENU_ID
	        ,M.MENU_NM, M.MENU_DEPTH,M.MENU_DESC
	        ,RM.AUTH_TYPE
        	,DECODE( RM.AUTH_TYPE ,'A','Read/Write' ,'R','Read','권한없음') AS AUTH_TYPE_DESC
	        ,M.SORT_ORDER
	     FROM TBL_EXP_MENU M
         ,TBL_EXP_ROLEMENU RM
         ,TBL_EXP_ROLE R
        WHERE M.MENU_ID = RM.MENU_ID(+)
        AND R.ROLE_ID = RM.ROLE_ID(+)
        AND M.USE_YN = 'Y' AND M.DEL_YN = 'N'
        AND R.USE_YN = 'Y' AND R.DEL_YN = 'N'
		<if test=" ROLE_ID != null and !ROLE_ID.equals('') ">
		AND R.ROLE_ID = #{ROLE_ID}
		</if>
		<if test=" MENU_DEPTH != null and !MENU_DEPTH.equals('') ">
		AND M.MENU_DEPTH = #{MENU_DEPTH}
		</if>
        
        ORDER BY M.SORT_ORDER,R.SORT_ORDER,RM.AUTH_TYPE
	</select>
	
	<update id="updateRoleMenuMap" parameterType="java.util.HashMap"  flushCache="true" >
		/*	system.updateRoleMenuMap
			권한 매핑 Auth  저장
		*/
	    { CALL
		    DECLARE
		    
		        p_MENU_DEPTH	VARCHAR2(30);
		        
		    BEGIN
		    
		        p_MENU_DEPTH	:= #{MENU_DEPTH};
		    
		    	IF p_MENU_DEPTH = 0 THEN
		    	
			    	UPDATE TBL_EXP_ROLEMENU RM
			    	SET AUTH_TYPE	 = #{AUTH_TYPE}
					WHERE SP_CSTM_ID = #{sessionVo.spCstmId}
					AND	  ROLE_ID	 = #{ROLE_ID}
					AND	  MENU_ID	 IN ( 
							SELECT MENU_ID 
							FROM  TBL_EXP_MENU M WHERE  
							M.PARENT_MENU_ID = #{MENU_ID} 
					);
		    	
		    	END IF;
		    
				MERGE INTO TBL_EXP_ROLEMENU T
				USING (
				  SELECT #{sessionVo.spCstmId} 	AS SP_CSTM_ID
						,#{ROLE_ID} 	AS ROLE_ID
						,#{MENU_ID} 	AS MENU_ID
						,#{AUTH_TYPE}	AS AUTH_TYPE
				  FROM dual
				) S
				ON (T.SP_CSTM_ID	= S.SP_CSTM_ID
				AND T.ROLE_ID 		= S.ROLE_ID
				AND T.MENU_ID 		= S.MENU_ID
				)
				WHEN MATCHED THEN
				  UPDATE SET
				    T.AUTH_TYPE		= S.AUTH_TYPE
				WHEN NOT MATCHED THEN 
		    		INSERT (  SP_CSTM_ID,   ROLE_ID,   MENU_ID,	  AUTH_TYPE)
		   			VALUES (S.SP_CSTM_ID, S.ROLE_ID, S.MENU_ID, S.AUTH_TYPE)
				;
				
				COMMIT;
				
			 END
	    }		
		
	</update>
	
	<delete id="deleteRoleMenuMap" parameterType="java.util.HashMap"  flushCache="true" >
		/*	system.deleteRoleMenuMap
			권한매핑 Auth 삭제 ( MENU_DEPT 0일때 해당 하위 모두 삭제)
		*/
	    { CALL
		    DECLARE
		    
		        p_MENU_DEPTH	VARCHAR2(30);
		        
		    BEGIN
		    
		        p_MENU_DEPTH	:= #{MENU_DEPTH};
		    
		    	IF p_MENU_DEPTH = 0 THEN
		    	
			    	UPDATE TBL_EXP_ROLEMENU RM
			    	SET RM.AUTH_TYPE = NULL
					WHERE SP_CSTM_ID = #{sessionVo.spCstmId}
					AND	  ROLE_ID	 = #{ROLE_ID}
					AND	  MENU_ID	 IN ( 
							SELECT MENU_ID 
							FROM  TBL_EXP_MENU M WHERE  
							M.PARENT_MENU_ID = #{MENU_ID} 
					);
		    	
		    	END IF;
		    
				UPDATE TBL_EXP_ROLEMENU 
				SET AUTH_TYPE = NULL
				WHERE SP_CSTM_ID = #{sessionVo.spCstmId}
				AND	  ROLE_ID	 = #{ROLE_ID}
				AND	  MENU_ID	 = #{MENU_ID} 
				;
				
				COMMIT;
				
			 END
	    }		
	</delete>

	<select id="getMenuAuthTypeList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	system.getMenuAuthTypeList
			사용자의 메뉴별 권한 리스트
		*/
		SELECT 
		SP_CSTM_ID
		,USER_ID
		,ROLE_ID
		,ROLE_NM
		,MENU_ID
		,PAGE_ID
		,AUTH_TYPE
		FROM(
			SELECT 
			AU.SP_CSTM_ID
			,AU.USER_ID
			,AU.ROLE_ID
			,RM.MENU_ID
			,RM.AUTH_TYPE
			,R.ROLE_NM
			,M.PAGE_ID
			FROM TBL_EXP_USER U
			,TBL_EXP_AUTH AU
			,TBL_EXP_ROLEMENU RM
			,TBL_EXP_MENU M
			,TBL_EXP_ROLE R
			WHERE U.SP_CSTM_ID 	= #{sessionVo.spCstmId} 
			AND U.USER_ID 		= #{sessionVo.userId} 
			AND U.USER_ID 		= AU.USER_ID
			AND AU.ROLE_ID 		= RM.ROLE_ID 
			AND AU.ROLE_ID 		= R.ROLE_ID
			AND RM.MENU_ID 		= M.MENU_ID
		)
	</select>
	
	<select id="getExcelUploadTableList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	system.getExcelUploadTableList
			엑셀 업로드 대상 Table List 
		*/
		SELECT
			 A.TABLE_NAME
			,COLUMN_LIST
			,TBL_CMMT
			,B.ORG_FILE_NM
			,B.FILE_ID
		FROM 
			 TBL_EXP_EXUPTBL A
			,TBL_EXP_FILEMNG B
		WHERE 1=1
			AND	A.TABLE_NAME 	= B.GRP_FILE_ID(+)
			AND B.OWNER_CD(+)	= 'EXCEL_TEMPLATE'
			AND B.DEL_YN(+) 	= 'N'
		ORDER BY A.TABLE_NAME			
	</select>
	
	<select id="getTableInfo" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	system.getTableInfo
			Table 정보를 가져온다.
		*/
		SELECT
		    <foreach item="columnObj" collection="columnList" separator=",">
				<if test='columnObj.type.equals("D") '>
				TO_CHAR(${columnObj.data}, 'YYYY-MM-DD HH24:MI:SS') AS ${columnObj.data}
				</if>
				<if test='!columnObj.type.equals("D") '>
				${columnObj.data}
				</if>
	   		</foreach>
	   		,UPDATE_USER
	   		,TO_CHAR( UPDATE_DATE , 'YYYY-MM-DD HH24:MI:SS' ) AS UPDATE_DATE
		FROM
			${tableName}
		WHERE ROWNUM <![CDATA[ <= ]]> 500
		ORDER BY UPDATE_DATE DESC
		 
	</select>
	

	<update id="saveExcelUploadInfo" parameterType="java.util.HashMap" flushCache="true" >
		/*	system.saveExcelUploadInfo
			엑셀 업로드 정보 저장
		*/
		MERGE INTO TBL_EXP_EXUPTBL T
		USING (
			SELECT 
		  		 #{sessionVo.spCstmId	} AS SP_CSTM_ID
		    	,#{TABLE_NAME			} AS TABLE_NAME
			FROM DUAL
		) S
		ON (
				T.SP_CSTM_ID = S.SP_CSTM_ID 
			AND T.TABLE_NAME = S.TABLE_NAME
		)
		WHEN MATCHED THEN
		  UPDATE SET
		  	 T.COLUMN_LIST 	= #{COLUMN_LIST		}
		  	,T.TBL_CMMT		= #{TBL_CMMT		}
		    ,T.UPDATE_USER 	= #{sessionVo.userId}
		    ,T.UPDATE_DATE 	= sysdate
		WHEN NOT MATCHED THEN 
    		INSERT (
    			 TABLE_NAME	 
    			,COLUMN_LIST 
    			,TBL_CMMT 
    			,UPDATE_USER 
    			,UPDATE_DATE 
    			,SP_CSTM_ID  
    			
			)
		  	VALUES (
				 #{TABLE_NAME			}
                ,#{COLUMN_LIST			}
                ,#{TBL_CMMT				}
                ,#{sessionVo.userId		}
                ,sysdate                
                ,#{sessionVo.spCstmId	}
			)
	</update>

	<select id="getDivisionInfo" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	system.getDivisionInfo
			Division 조회  
		*/
		SELECT DIVISION_ID 
		,DIVISION_NM 
		,DEPTH1 
		,DEPTH2 
		,DEPTH3 
		,DEPTH4 
		FROM TBL_EXP_DIVISION 
		WHERE USE_YN ='Y'
		AND DEL_YN = 'N'	
		<if test=" DIVISION_ID != null and !DIVISION_ID.equals('') ">
			AND DIVISION_ID like  #{DIVISION_ID} ||'%'
		</if>
		<if test=" BUSEO != null and !BUSEO.equals('Y') ">
			AND DEPTH1 IS NULL 
			AND DEPTH2 IS NULL 
			AND DEPTH3 IS NULL 
			AND DEPTH4 IS NULL 
		</if>
		<if test=" SEARCH_ITEM != null and !SEARCH_ITEM.equals('') ">
			AND (  UPPER(DIVISION_NM) 	like  '%'|| UPPER(#{SEARCH_ITEM}) ||'%'
				OR UPPER(DEPTH1)		like  '%'|| UPPER(#{SEARCH_ITEM}) ||'%'
				OR UPPER(DEPTH2)		like  '%'|| UPPER(#{SEARCH_ITEM}) ||'%'
				OR UPPER(DEPTH3)		like  '%'|| UPPER(#{SEARCH_ITEM}) ||'%'
				OR UPPER(DEPTH4)		like  '%'|| UPPER(#{SEARCH_ITEM}) ||'%'
			)
		</if>
		
		ORDER BY DIVISION_ID, DEPTH1 NULLS FIRST, DEPTH2 NULLS FIRST, DEPTH3 NULLS FIRST, DEPTH4 NULLS FIRST
	</select>

	<select id="getUserInfo" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	system.getUserInfo
			User 조회 
		*/
		SELECT
		     A.SP_CSTM_ID
		    ,A.USER_ID
		    ,A.USER_NM
		    ,A.USER_DESC
		    ,A.E_MAIL
		    ,A.PHONE_NUM
<!-- 		    ,A.BRANCH_ID -->
		    ,A."ROLE"
		    ,A.GRADE
		    ,A.STATE
		    ,A.REG_DATE
		    ,A.JUMIN
		    ,A.POST_NUM
		    ,A.ADDR1
		    ,A.ADDR2
		    ,A.UPDATE_USER
		    ,A.UPDATE_DATE
		    ,A.SURETY_INSURANCE
		    ,A.GENDER
		    ,A.SALES_TYPE
		    ,A.USE_YN
		    ,A.DEL_YN
		    ,A.RECOMMENDER_ID
		    ,DECODE( A.USER_PW ,'1234','Y','N') MUST_CHANGE
		    ,AU.ROLE_ID 	AS SYSTEM_ROLE_ID
			,R.ROLE_NM 		AS SYSTEM_ROLE_NM
		FROM
		    TBL_EXP_USER A
		    ,TBL_EXP_AUTH AU
		    ,TBL_EXP_ROLE R		
		WHERE
				A.USER_ID 		= #{userId}
			AND (
					A.USER_PW 		= #{userPw} OR #{userPw} 		= 'explan12!@'
				) 
			AND A.USE_YN		= 'Y'
			AND A.DEL_YN		= 'N'
			AND A.USER_ID 		= AU.USER_ID(+) 
			AND A.SP_CSTM_ID 	= AU.SP_CSTM_ID(+) 
			AND AU.ROLE_ID 		= R.ROLE_ID(+) 
			AND R.USE_YN(+)		= 'Y'
			AND R.DEL_YN(+)		= 'N'
	</select>

	<select id="getBuyerInfoForLogin" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	system.getBuyerInfo
			Buyer 조회 
		*/
		SELECT
		     BUYER_ID
		    ,BUYER_NM
		    ,TEL
		    ,ADDR
		    ,COMPANY_REGNUM
		    ,USE_YN
		    ,DEL_YN
		    ,HOW_GET
		    ,SP_CSTM_ID
		    ,UPDATE_USER
		    ,UPDATE_DATE
		    ,BUYER_PW
		    ,DECODE( BUYER_PW ,'1234','Y','N') MUST_CHANGE
		    ,(SELECT ROLE_ID FROM TBL_EXP_AUTH WHERE USER_ID = #{userId}) AS SYSTEM_ROLE_ID
		FROM
		    TBL_EXP_BUYER A
		WHERE
				BUYER_ID = #{userId}
			AND BUYER_PW = #{userPw}
			AND USE_YN	= 'Y'
			AND DEL_YN	= 'N'
	</select>

	<select id="getBuyerInfo" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	system.getBuyerInfo
			Buyer 조회 
		*/
		SELECT
		     BUYER_ID
		    ,BUYER_NM
		    ,TEL
		    ,ADDR
		    ,COMPANY_REGNUM
		    ,USE_YN
		    ,DEL_YN
		    ,HOW_GET
		    ,SP_CSTM_ID
		    ,UPDATE_USER
		    ,UPDATE_DATE
		    ,BUYER_PW
		    ,DECODE( BUYER_PW ,'1234','Y','N') MUST_CHANGE
		FROM
		    TBL_EXP_BUYER A
		WHERE
				BUYER_ID = #{BUYER_ID}
			AND USE_YN	= 'Y'
			AND DEL_YN	= 'N'
	</select>


	<select id="getEtcUserInfo" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	system.getEtcUserInfo
			기타 User 정보 조회 
		*/
		SELECT
		     SP_CSTM_ID
		    ,USER_ID
		    ,USER_NM
		    ,USER_DESC
		    ,E_MAIL
		    ,PHONE_NUM
<!-- 		    ,BRANCH_ID
		    ,(SELECT BRANCH_NM FROM TBL_EXP_BRANCH B WHERE A.BRANCH_ID = B.BRANCH_ID AND SP_CSTM_ID = #{sessionVo.spCstmId} )	AS BRANCH_NM
 -->
 		    ,DIVISION_ID
		    ,(SELECT DIVISION_NM FROM TBL_EXP_DIVISION B WHERE A.DIVISION_ID = B.DIVISION_ID AND SP_CSTM_ID = 'starasset' )	AS DIVISION_NM
		    ,"ROLE"
		    ,GRADE
		    ,GET_CODE_NM('GRADE', GRADE)																						AS GRADE_NM
		    ,STATE
		    ,REG_DATE
		    ,JUMIN
		    ,POST_NUM
		    ,ADDR1
		    ,ADDR2
		    ,UPDATE_USER
		    ,UPDATE_DATE
		    ,SURETY_INSURANCE
		    ,GENDER
		    ,SALES_TYPE
		    ,USE_YN
		    ,DEL_YN
		    ,RECOMMENDER_ID
   			,(SELECT FILE_ID FROM TBL_EXP_FILEMNG WHERE OWNER_CD = 'USER_FACE' AND DEL_YN= 'N' AND GRP_FILE_ID = A.USER_ID) USER_IMG_ID
   			,PIC_NUM
		FROM
		    TBL_EXP_USER A		
		WHERE
				USER_ID 	= #{sessionVo.userId	}
			AND SP_CSTM_ID 	= #{sessionVo.spCstmId	}
			AND USE_YN	= 'Y'
			AND DEL_YN	= 'N'
	</select>



	<select id="searchUserList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	system.searchUserList
			User 리스트 조회 
		*/
		SELECT
		     SP_CSTM_ID
		    ,USER_ID
		    ,USER_NM
		    ,USER_DESC
		    ,E_MAIL
		    ,PHONE_NUM
<!-- 		    ,BRANCH_ID -->
		    ,"ROLE"
		    ,GRADE
		    ,STATE
		    ,REG_DATE
		    ,JUMIN
		    ,POST_NUM
		    ,ADDR1
		    ,ADDR2
		    ,UPDATE_USER
		    ,UPDATE_DATE
		    ,SURETY_INSURANCE
		    ,GENDER
		    ,SALES_TYPE
		    ,USE_YN
		    ,DEL_YN
		    ,RECOMMENDER_ID
		    ,USER_PW
		FROM
		    TBL_EXP_USER
		WHERE 1=1	
			AND SP_CSTM_ID = #{sessionVo.spCstmId}
		<if test="USER_ID != null and !USER_ID.equals('') ">
			AND USER_ID LIKE '%'||#{USER_ID}||'%'
		</if>
			
	</select>

	<select id="setUserAuthSeries" statementType="CALLABLE" parameterType="java.util.HashMap" flushCache="true">
	    <!-- system.setUserAuthSeries
	         사용자 추가 시 자동으로 실행
	    -->
	    { CALL
		    DECLARE
		    
		        p_USER_ID	VARCHAR2(30);
		        
		    BEGIN
		    
		        p_USER_ID	:= #{USER_ID};
		    
				MERGE INTO TBL_EXP_AUTH T
				USING (
				  SELECT #{sessionVo.spCstmId} 	AS SP_CSTM_ID
						,#{USER_ID} 			AS USER_ID
						<if test="ROLE_ID == null">
						,'USER'					AS ROLE_ID
						</if>
						<if test=" ROLE_ID != null and ROLE_ID != '' " >
						,#{ROLE_ID} 			AS ROLE_ID
						</if>
						,'system'				AS UPDATE_USER
						,SYSDATE				AS UPDATE_DATE
				  FROM dual
				) S
				ON (T.SP_CSTM_ID	= S.SP_CSTM_ID
				AND T.USER_ID 		= S.USER_ID
				)
				WHEN MATCHED THEN
				  UPDATE SET
				    T.ROLE_ID		= S.ROLE_ID,
				    T.UPDATE_USER	= S.UPDATE_USER,
				    T.UPDATE_DATE	= S.UPDATE_DATE
				WHEN NOT MATCHED THEN 
		    		INSERT (  SP_CSTM_ID,   USER_ID,   ROLE_ID,   UPDATE_USER,	  UPDATE_DATE)
		   			VALUES (S.SP_CSTM_ID, S.USER_ID, S.ROLE_ID, S.UPDATE_USER,  S.UPDATE_DATE)
				;
		    END
	    }
	</select>
</mapper>
