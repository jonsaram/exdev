<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="result">

	<cache />

	<!--
	실적 관리 
	 -->
	<sql id='NOT_CONTRACTED_STATE'>
			( 	C.PROCESS_STATE ='PRE_CONTRACT' 
			OR	C.PROCESS_STATE ='ON_CONTRACTING_APPR'
			OR	C.PROCESS_STATE ='CONTRACTING'
			OR	C.PROCESS_STATE ='PENDING'
			OR	C.PROCESS_STATE ='REJECTING'
			)
	</sql>
	 
	<sql id='CONTRACTED_STATE'>
			( 	C.PROCESS_STATE ='CONTRACTED' 
			OR	C.PROCESS_STATE ='ON_COMPLETED_APPR'
			OR	C.PROCESS_STATE ='COMPLETED'
			)
	</sql>
		 	
	<sql id="resultList">
			SELECT DISTINCT
			 C.TOTAL_COST 
			,TO_CHAR( R.RESULT_DATE, 'YYYY-MM-DD') AS RESULT_DATE
			,TO_CHAR( R.RESULT_DATE, 'YYYY-MM') AS RESULT_DATE_MONTH
			,B.BUYER_ID
			,B.BUYER_NM
			,CS.CONSULTING_ID
			,CS.CONSULTING_NM
			,R.INCOME_TYPE
			,NVL(TO_CHAR(R.INCOME),'-')  AS INCOME
			,DECODE( CS.CONSULTING_TYPE , 'MONTHLY' , 'N/A' , R.REMAINING_SUM ) AS REMAINING_SUM
			,( R.INCOME + R.REMAINING_SUM ) AS LAST_REMAINING_SUM
			,NVL(CO.SUM_COST_PRICE ,0) AS COST_PRICE
			,COST_ID_AGG
			,R.CONTRACT_ID
			,R.RESULT_ID
			,U.USER_ID
			,U.USER_NM
			,U.GRADE
			,GET_CODE_NM( 'GRADE'	, U.GRADE ) GRADE_NM 
			,GET_CODE_NM( 'ROLE'	, U.ROLE  ) ROLE_NM
			,U.ROLE
			,P.RELATION_TYPE
			,GET_CODE_NM( 'RELATION_TYPE', P.RELATION_TYPE ) AS RELATION_TYPE_NM
			,P.RATE
			,NVL(TO_CHAR(ROUND(P.PAYMENT,2)),'-') AS PAYMENT
			,P.PAYMENT_ID
			,ROUND(R.ORG_SELLING_PRICE,2) AS ORG_SELLING_PRICE
			,NVL(TO_CHAR(ROUND(TO_NUMBER(R.ORG_SELLING_PRICE) - TO_NUMBER( SUM(P.PAYMENT) OVER(PARTITION BY R.RESULT_ID ) ),2 )),'-') AS REAL_PROFIT
			,R.USE_YN
			,R.DEL_YN
			,R.UPDATE_USER
			,R.UPDATE_DATE
			,TO_CHAR( R.UPDATE_DATE, 'YYYY-MM') AS UPDATE_DATE_MONTH
			,CASE WHEN ROW_NUMBER() OVER (ORDER BY R.UPDATE_DATE , P.PAYMENT_ID) = COUNT(*) OVER () AND C.PROCESS_STATE != 'COMPLETED' THEN R.RESULT_ID END AS LAST_RESULT_ID
			,NVL(( 	SELECT COUNT( * )  FROM TBL_EXP_RESULT I 
				WHERE I.CONTRACT_ID = C.CONTRACT_ID AND I.USE_YN = 'Y' AND I.DEL_YN = 'N')
			,0) AS RESULT_INSERTED_CNT
			,R.SETTLEMENT_MONTH
			FROM TBL_EXP_RESULT R
			,TBL_EXP_CONTRACT C
			,(
				SELECT CONTRACT_ID, RESULT_ID, SUM(COST_PRICE) SUM_COST_PRICE, LISTAGG(CS.COST_ID,',') AS COST_ID_AGG
				FROM TBL_EXP_COST CS 
				WHERE 1=1 
			<if test=" CONTRACT_ID != null and !CONTRACT_ID.equals('') ">
				AND CS.CONTRACT_ID = #{CONTRACT_ID}
			</if>
				AND CS.USE_YN = 'Y' AND CS.DEL_YN = 'N'
				GROUP BY CONTRACT_ID, RESULT_ID 
			) CO
			,( SELECT CONTRACT_ID, USER_ID, RESULT_ID, PAYMENT, 
				PAYMENT_ID, PAY_ID, RATE,
				RELATION_TYPE AS RELATION_TYPE
				FROM TBL_EXP_PAYMENT 
				WHERE CONTRACT_ID =  #{CONTRACT_ID}
				AND USE_YN = 'Y' AND DEL_YN = 'N'
			) P
			,TBL_EXP_USER U
			,TBL_EXP_BUYER B
			,TBL_EXP_CONSULTING CS
			WHERE C.CONTRACT_ID	= R.CONTRACT_ID 
			AND C.CONTRACT_ID	= CO.CONTRACT_ID(+) 
			AND R.RESULT_ID		= CO.RESULT_ID(+)
			AND R.CONTRACT_ID	= P.CONTRACT_ID(+) 
			AND R.RESULT_ID		= P.RESULT_ID(+) 
			AND C.BUYER_ID		= B.BUYER_ID
			AND C.CONSULTING_ID = CS.CONSULTING_ID
			<if test=" CONTRACT_ID != null and !CONTRACT_ID.equals('') ">
			AND C.CONTRACT_ID 	= #{CONTRACT_ID}
			</if>
			<if test=" RESULT_ID != null and !RESULT_ID.equals('') ">
			AND R.RESULT_ID 	= #{RESULT_ID}
			</if>
			AND U.USER_ID 	= P.USER_ID 
			<if test=" USER_ID != null and !USER_ID.equals('') and !USER_ID.equals('--') ">
			AND U.USER_ID 		= #{USER_ID}
			</if>
			<if test=" FROM_RESULT_DATE != null and !FROM_RESULT_DATE.equals('') ">
			AND  R.RESULT_DATE BETWEEN	TO_DATE( #{FROM_RESULT_DATE},'YYYY-MM-DD') 
									AND TO_DATE( #{TO_RESULT_DATE},'YYYY-MM-DD')
			</if>
			AND R.USE_YN		= 'Y'
			AND R.DEL_YN		= 'N'
			<if test=" GUBUN != null and GUBUN.equals('MNG') ">
			ORDER BY RESULT_DATE ,  R.RESULT_ID, <include refid="buisnessHierarchyOrderBy"/>
			</if>
			<if test=" GUBUN != null and GUBUN.equals('LIST') ">
			ORDER BY REMAINING_SUM DESC  , P.PAYMENT_ID
			</if>
	</sql> 
	<select id="getResultList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	result.getResultList
			실적 현황 리스트 조회 
		*/
	SELECT ROWNUM AS RN,
		A.*
	FROM(		
		<include refid="resultList"/>
		) A
	</select>
		
	<select id="getResultUserList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	result.getResultUserList
			계약 실적 담당자 리스트 조회 
		*/
		SELECT DISTINCT USER_ID, USER_NM
		FROM(		
			<include refid="resultList"/>
		) A
	</select>	
	 
	<select id="getResultDataList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	result.getResultDataList
			실적 현황 리스트 조회 
		*/
		SELECT * FROM(
			SELECT ROW_NUMBER() OVER( ORDER BY UPDATE_DATE, RESULT_DATE , REMAINING_SUM DESC ) AS RN
			,CONTRACT_ID
			,RESULT_ID
			,RESULT_DATE_YM
			,BUYER_NM
			,CONSULTING_NM
			,USER_NM
			,USER_ID
			,TOTAL_COST
			,DECODE( CONSULTING_TYPE, 'MONTHLY','N/A' , REMAINING_SUM ) AS REMAINING_SUM
			,RESULT_DATE
			,INCOME
			,SUM_COST_PRICE
			,ROUND((INCOME * 10/11 - SUM_COST_PRICE * 10/11)) AS ORG_SELLING_PRICE
			,UPDATE_DATE
			,IS_PAYABLE
			FROM(
			
				SELECT R.CONTRACT_ID, R.RESULT_ID
				, TO_CHAR(R.RESULT_DATE ,'YYYY-MM') AS RESULT_DATE_YM
				,( SELECT BUYER_NM FROM TBL_EXP_BUYER WHERE BUYER_ID = C.BUYER_ID AND USE_YN='Y' AND DEL_YN='N') AS BUYER_NM
				,CS.CONSULTING_NM AS CONSULTING_NM
				,GET_USER_NM(U.USER_ID) AS USER_NM
				,U.USER_ID
				,C.TOTAL_COST 
				,R.REMAINING_SUM 
				,TO_CHAR(R.RESULT_DATE,'YYYY-MM-DD') AS RESULT_DATE
				,R.INCOME 
				,NVL(( SELECT SUM( COST_PRICE)  FROM TBL_EXP_COST I 
					WHERE I.CONTRACT_ID = C.CONTRACT_ID 
					AND I.RESULT_ID = R.RESULT_ID AND I.USE_YN = 'Y' AND I.DEL_YN = 'N'
				 ),0) SUM_COST_PRICE
				 ,R.UPDATE_DATE
				 ,CS.CONSULTING_TYPE 
				 ,R.IS_PAYABLE
				FROM TBL_EXP_CONTRACT C
				,TBL_EXP_RESULT R
				,TBL_EXP_USER U 
				,TBL_EXP_CONSULTING CS 
				WHERE C.CONTRACT_ID = R.CONTRACT_ID
				AND C.USER_ID = U.USER_ID 
				AND C.CONSULTING_ID = CS.CONSULTING_ID 
				AND C.USE_YN = 'Y' AND C.DEL_YN = 'N'
				AND R.USE_YN = 'Y' AND R.DEL_YN = 'N'
				<if test=" USER_IDS != null and !USER_IDS.equals('') ">
				    <foreach item="USER_ID" collection="USER_IDS" open="AND U.USER_ID  IN (" close=")" separator=",">
					#{USER_ID}
					</foreach>
				</if>  
			)
			WHERE RESULT_DATE_YM = #{RESULT_DATE_YM}
			<if test=" CONTRACT_ID != null and !CONTRACT_ID.equals('') ">  
			AND CONTRACT_ID = #{CONTRACT_ID}
			</if>		
			ORDER BY UPDATE_DATE, RESULT_DATE , REMAINING_SUM DESC
		)  RN 
		ORDER BY RN
	</select>
	
	<update id="updateIsPayable" parameterType="java.util.HashMap"  flushCache="true" >
		/*	result.updateIsPayable
			자문보고서 실적 완료 처리
		*/
		UPDATE TBL_EXP_RESULT
		SET IS_PAYABLE =  #{IS_PAYABLE}
		WHERE RESULT_ID = #{RESULT_ID}
	</update>
		 
	<select id="getContractList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	result.getContractList
			실적 입력을 위한 계약 리스트 조회 
		*/
	 
		SELECT 
		 C.BUYER_ID
		,B.BUYER_NM
		,U.USER_NM
		,C.TOTAL_COST 
		,C.CONTACT_DATE
		,TO_CHAR( C.CONTRACT_DATE , 'YYYY-MM-DD') AS CONTRACT_DATE
		,C.PROCESS_STATE
		,GET_CODE_NM( 'PROCESS_STATE', C.PROCESS_STATE ) PROCESS_STATE_MN
		,C.CONTRACT_ID
		,C.EXPIRE_DATE
		,GET_CODE_NM( 'CONTRACT_TYPE', C.CONTRACT_TYPE) CONTRACT_TYPE_NM
		,C.USER_ID, C.CONTRACT_DATE, C.CONTRACT_TYPE
		,C.CONSULTING_ID, CS.CONSULTING_NM, CS.CONSULTING_DESC
		,CS.CONSULTING_TYPE ,GET_CODE_NM('CONSULTING_TYPE',CS.CONSULTING_TYPE) AS CONSULTING_TYPE_NM 
		,C.PROCESS_STATE, C.LAST_SOLUTION, C.TAX_MNG, C.LABOR_MNG, C.CONSULTING_CLASS
		,C.USE_YN,C.DEL_YN,C.UPDATE_USER,C.UPDATE_DATE
		,( SELECT MIN( REMAINING_SUM ) FROM TBL_EXP_RESULT I 
		   WHERE I.CONTRACT_ID	= C.CONTRACT_ID
		   AND   I.USE_YN = 'Y' AND I.DEL_YN = 'N'  ) AS REMAINING_SUM 
		FROM TBL_EXP_CONTRACT C
		,TBL_EXP_USER U
		,TBL_EXP_BUYER B
		,TBL_EXP_CONSULTING CS
		,TBL_EXP_CONTRACT_MEMBER TM
		WHERE 1=1
		AND C.USE_YN	= 'Y' 
		AND C.DEL_YN 	= 'N'
		AND C.USER_ID	= U.USER_ID
		AND C.BUYER_ID	= B.BUYER_ID
		AND C.CONSULTING_ID = CS.CONSULTING_ID
		AND <include refid="CONTRACTED_STATE"/>
		AND C.CONTRACT_ID = TM.CONTRACT_ID(+)
		AND TM.RELATION_TYPE(+) = 'EXECUTE'
        <choose>
       	<when test='PA_ROLE != null'> 
        	<if test=" PA_ROLE.equals('SYSTEM') or PA_ROLE.equals('MANAGER')">
		    AND 1=1 
		       <choose>
		       	<when test=" USER_ID != null and !USER_ID.equals('') and USER != null and !USER.equals('')"> 
						AND (	C.USER_ID  LIKE '%' || #{USER_ID} || '%'
						  	OR  U.USER_NM  LIKE '%' || #{USER_ID} || '%'
							OR  C.USER_ID  LIKE '%' || #{USER} || '%'
						  	OR  U.USER_NM  LIKE '%' || #{USER} || '%'
							OR  C.USER_ID  = NVL(REGEXP_SUBSTR(#{USER}, '\(([^)]+)\)', 1, 1, NULL, 1),#{USER} )
						  	OR  U.USER_NM  = NVL(REGEXP_SUBSTR(#{USER}, '[^ ]+', 1, 1),#{USER} )
						  	) 
				</when>
		       	<when test=" USER_ID != null and !USER_ID.equals('')"> 
						AND (  C.USER_ID  LIKE '%' || #{USER_ID} || '%'
						  	OR  U.USER_NM  LIKE '%' || #{USER_ID} || '%'
						  	)
				</when>
		       	<when test=" USER != null and !USER.equals('')"> 
						AND (  C.USER_ID  LIKE '%' || #{USER} || '%'
						  	OR  U.USER_NM LIKE '%' || #{USER} || '%'
							OR  C.USER_ID = NVL(REGEXP_SUBSTR(#{USER}, '\(([^)]+)\)', 1, 1, NULL, 1),#{USER} )
						  	OR  U.USER_NM = NVL(REGEXP_SUBSTR(#{USER}, '[^ ]+', 1, 1),#{USER} )
						  	)
				</when>
				</choose>	
		       <choose>
		       	<when test=" BUYER_ID != null and !BUYER_ID.equals('') and BUYER != null and !BUYER.equals('')">  
						AND ( C.BUYER_ID = #{BUYER_ID}
						   OR B.BUYER_NM = #{BUYER_ID}     
						   OR C.BUYER_ID LIKE '%'|| #{BUYER} ||'%'
						   OR B.BUYER_NM LIKE '%'|| #{BUYER} ||'%'
						   OR C.BUYER_ID 	= NVL(REGEXP_SUBSTR(#{BUYER}, '\(([^)]+)\)', 1, 1, NULL, 1),#{BUYER} )
						   OR B.BUYER_NM 	= NVL(REGEXP_SUBSTR(#{BUYER}, '[^ ]+', 1, 1),#{BUYER} )
						   )
				</when>
		       	<when test=" BUYER_ID != null and !BUYER_ID.equals('')">  
						AND ( C.BUYER_ID LIKE '%' || #{BUYER_ID} || '%'
				   			OR B.BUYER_NM LIKE '%' || #{BUYER_ID} || '%'     
				   			)
				</when>
		       	<when test=" BUYER != null and !BUYER.equals('') ">  
						AND (  C.BUYER_ID   LIKE '%' || #{BUYER} || '%'
						  	OR B.BUYER_NM   LIKE '%' || #{BUYER} || '%'
						    OR C.BUYER_ID  = NVL(REGEXP_SUBSTR(#{BUYER}, '\(([^)]+)\)', 1, 1, NULL, 1),#{BUYER} )
						    OR B.BUYER_NM  = NVL(REGEXP_SUBSTR(#{BUYER}, '[^ ]+', 1, 1),#{BUYER} )
						  	)
				</when>
		       	<when test=" CONSULTING != null and !CONSULTING.equals('') and CONSULTING_ID != null and !CONSULTING_ID.equals('')">  
						AND (  C.CONSULTING_ID   LIKE '%' || #{CONSULTING_ID} || '%'
						    OR CS.CONSULTING_NM  LIKE '%'|| #{CONSULTING} || '%'
						  	)
				</when>		
		       	<when test=" CONSULTING_ID != null and !CONSULTING_ID.equals('')">  
						AND   C.CONSULTING_ID   LIKE '%' || #{CONSULTING_ID} || '%'
						  	 
				</when>		
		       	<when test=" CONSULTING != null and !CONSULTING.equals('')  ">  
						AND   CS.CONSULTING_NM  LIKE '%'|| #{CONSULTING} || '%'  
						  	 
				</when>				
				</choose>							     
        	</if>
        	<if test=" !PA_ROLE.equals('SYSTEM') and !PA_ROLE.equals('MANAGER')">
		        	AND (
							C.USER_ID	= #{sessionVo.userId	}
					 	OR	TM.USER_ID	= #{sessionVo.userId	} 	
					)
        	</if>
		</when>
		
		</choose>	
 				
		<if test=" FROM_DATE != null and !FROM_DATE.equals('') ">
		AND TO_CHAR( C.CONTRACT_DATE, 'YYYY-MM-DD' )  <![CDATA[ >= ]]> #{FROM_DATE}
		</if>
		<if test=" TO_DATE != null and !TO_DATE.equals('') ">
		 AND TO_CHAR( C.CONTRACT_DATE, 'YYYY-MM-DD')  <![CDATA[ <= ]]> #{TO_DATE}
		</if>
		ORDER BY CS.CONSULTING_TYPE, C.UPDATE_DATE DESC, C.CONTRACT_DATE DESC , C.CONTACT_DATE DESC
	
	</select>	
	
	<update id="updateResultItem" parameterType="java.util.HashMap"  flushCache="true" >
		<!-- x	result.updateResultItem
			실적 저장
		-->
	    { CALL
		    DECLARE
		        p_CONTRACT_ID	VARCHAR2(30);
		        p_RESULT_ID		VARCHAR2(30);
		        p_RESULT_DATE	VARCHAR2(30);
		        p_INCOME		VARCHAR2(30);
		        p_INCOME_TYPE	VARCHAR2(30);
		        
		    BEGIN
		    
		    	p_CONTRACT_ID 	:= #{CONTRACT_ID};
		        p_RESULT_ID   	:= #{RESULT_ID};
		        p_RESULT_DATE   := #{RESULT_DATE};
		        p_INCOME   		:= #{INCOME};
		        p_INCOME_TYPE	:= #{INCOME_TYPE};
		    
		    
				MERGE INTO TBL_EXP_RESULT T
				USING (
				
				  SELECT p_CONTRACT_ID				AS CONTRACT_ID,
				         p_RESULT_ID 				AS RESULT_ID,
				         TO_NUMBER(p_INCOME)		AS INCOME,
				         p_RESULT_DATE				AS RESULT_DATE,
				         p_INCOME_TYPE				AS INCOME_TYPE,
				         'Y'	 					AS USE_YN,
				         'N'	 					AS DEL_YN,
				         #{sessionVo.userId}		AS UPDATE_USER,
				         GET_KRDT(SYSDATE)			AS UPDATE_DATE,
				         #{SETTLEMENT_MONTH}		AS SETTLEMENT_MONTH
				  FROM dual
				  
				) S
				ON (T.CONTRACT_ID	= S.CONTRACT_ID 
				AND T.RESULT_ID		= S.RESULT_ID 
				)
				WHEN MATCHED THEN
				  UPDATE SET
				         T.RESULT_DATE 			= TO_DATE(S.RESULT_DATE,'YYYY-MM-DD'),
				         T.INCOME				= S.INCOME,
				         T.INCOME_TYPE 			= S.INCOME_TYPE,
				         T.USE_YN				= S.USE_YN,
				         T.DEL_YN				= S.DEL_YN,
				         T.UPDATE_USER			= S.UPDATE_USER,
				         T.UPDATE_DATE			= GET_KRDT(SYSDATE),
				         T.SETTLEMENT_MONTH		= S.SETTLEMENT_MONTH
				WHEN NOT MATCHED THEN 
		    		INSERT (  CONTRACT_ID,   RESULT_ID,   RESULT_DATE,   INCOME,   INCOME_TYPE,   USE_YN,   DEL_YN,   UPDATE_USER,   UPDATE_DATE, SETTLEMENT_MONTH)
		   			VALUES (S.CONTRACT_ID, S.RESULT_ID, TO_DATE(S.RESULT_DATE,'YYYY-MM-DD'), S.INCOME, S.INCOME_TYPE, S.USE_YN, S.DEL_YN, S.UPDATE_USER, S.UPDATE_DATE, S.SETTLEMENT_MONTH)
		   			;
		   			
		   		COMMIT;
		   			
		   		UPDATE TBL_EXP_RESULT T
		   		SET
					T.REMAINING_SUM			= 	( SELECT  TO_NUMBER( TOTAL_COST )   
													FROM TBL_EXP_CONTRACT 
				           							WHERE 	CONTRACT_ID = p_CONTRACT_ID
				          						)
				          						-
												( SELECT  SUM(INCOME)   
													FROM TBL_EXP_RESULT 
				           							WHERE 	CONTRACT_ID = p_CONTRACT_ID
				           							AND 	USE_YN= 'Y' AND DEL_YN = 'N'
				          						) 	,
					T.ORG_SELLING_PRICE		= NVL(T.INCOME * 10/11  - 						  
											  NVL(
													(
														SELECT SUM(SUM_COST_PRICE )
														FROM (
															SELECT SUM(COST_PRICE) * 10/11 AS SUM_COST_PRICE  FROM TBL_EXP_COST
															WHERE CONTRACT_ID = p_CONTRACT_ID
															AND   RESULT_ID	  = p_RESULT_ID
															AND   USE_YN= 'Y' AND DEL_YN = 'N' AND TAX_FREE_YN = 'N'
															UNION ALL 	
														 	SELECT SUM(COST_PRICE) FROM TBL_EXP_COST
															WHERE CONTRACT_ID = p_CONTRACT_ID
															AND   RESULT_ID	  = p_RESULT_ID
															AND   USE_YN= 'Y' AND DEL_YN = 'N' AND TAX_FREE_YN = 'Y'
														)		          						
													)
				          						,0)
				          						,0)
		   		WHERE  T.CONTRACT_ID	= p_CONTRACT_ID
				   AND T.RESULT_ID		= p_RESULT_ID	
				;
				
				COMMIT;
				
			END
		}		   			
	</update>
	
	<delete id="deleteResultItem" parameterType="java.util.HashMap"  flushCache="true" >
		/*	result.deleteResultItem
			실적 삭제
		*/
		UPDATE TBL_EXP_RESULT
		SET USE_YN = 'N'
		,	DEL_YN = 'Y'
		,	UPDATE_USER = #{sessionVo.userId}
		,	UPDATE_DATE = GET_KRDT(SYSDATE)
		WHERE CONTRACT_ID	= #{CONTRACT_ID}
		AND RESULT_ID	 	= #{RESULT_ID}
	</delete>
		
	<sql id="cmUsers"> 
		SELECT DISTINCT CM.CONTRACT_ID, CM.USER_ID  
		,U.USER_NM 
		,GET_CODE_NM('RELATION_TYPE', CM.RELATION_TYPE) RELATION_TYPE_NM
		,U.ROLE
		,U.GRADE
		,GET_CODE_NM('GRADE', U.GRADE) GRADE_NM
		,CM.RELATION_TYPE
		,U.SALES_TYPE
		,(SELECT TM.COWORK_RATE FROM TBL_EXP_TEAM_MEMBER TM WHERE CM.CONTRACT_ID = TM.CONTRACT_ID AND CM.USER_ID = TM.USER_ID AND TM.TEAM_USER_ROLE = 'COWORK' ) AS COWORK_RATE
		FROM TBL_EXP_CONTRACT_MEMBER CM 
		,TBL_EXP_USER U
		WHERE CM.CONTRACT_ID = #{CONTRACT_ID}
		AND CM.USER_ID = U.USER_ID
	</sql>
	
	<sql id="buisnessHierarchyOrderBy"> 
          CASE	
              WHEN RELATION_TYPE = 'EXECUTE'	THEN 10
              WHEN RELATION_TYPE = 'COWORK'		THEN 
                  CASE 
                      WHEN GRADE = 'S_MASTER'	THEN 20
                      WHEN GRADE = 'MASTER'		THEN 21
                      WHEN GRADE = 'FA' 		THEN 22
                      WHEN GRADE = 'SUGGESTER' 	THEN 23
                  END
              WHEN RELATION_TYPE = 'SALES' 		THEN
                  CASE 
                      WHEN GRADE = 'S_MASTER' 	THEN 30
                      WHEN GRADE = 'MASTER' 	THEN 31
                      WHEN GRADE = 'FA' 		THEN 32
                      WHEN GRADE = 'SUGGESTER' 	THEN 33
                  END
              WHEN RELATION_TYPE = 'OVERRIDING' THEN 41
          END
	</sql>
	
	<select id="selectTempPaymentItem" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	result.selectTempPaymentItem
			실적 수당 테이블 조회
		*/
		SELECT A.CONTRACT_ID
		, A.USER_ID
		, GET_USER_NM( A.USER_ID ) USER_NM
		, #{RESULT_ID} AS RESULT_ID
		, A.PAYMENT_ID
		, CM.RELATION_TYPE
		, GET_CODE_NM('RELATION_TYPE', CM.RELATION_TYPE ) AS RELATION_TYPE_NM
		, U.GRADE AS GRADE
		, P.PAY_ID
		, P.RATE
		, P.PAYMENT
		FROM (
			WITH CM_USER AS (
				<include refid="cmUsers"/>
			)
			SELECT A.*
			 ,ROW_NUMBER() OVER (ORDER BY <include refid="buisnessHierarchyOrderBy"/> ) AS PAYMENT_ID
			FROM(
				SELECT CMU.CONTRACT_ID 
				,CMU.USER_ID
				,CMU.USER_NM
				,CMU.GRADE_NM
				,CMU.RELATION_TYPE_NM
				,CMU.ROLE
				,CMU.GRADE
				,CMU.RELATION_TYPE
				FROM CM_USER CMU
				WHERE CMU.RELATION_TYPE !='OVERRIDING'
				
				UNION ALL 
				
				SELECT CMU.CONTRACT_ID 
				,CMU.USER_ID
				,CMU.USER_NM
				,CMU.GRADE_NM
				,GET_CODE_NM('RELATION_TYPE', CMU.RELATION_TYPE) RELATION_TYPE_NM
				,'OVERRIDING' AS ROLE
				,CMU.ROLE
				,CMU.RELATION_TYPE
				FROM CM_USER CMU
				WHERE CMU.RELATION_TYPE ='OVERRIDING'
				
			) A
			ORDER BY <include refid="buisnessHierarchyOrderBy"/>

		) A
		,TBL_EXP_CONTRACT_MEMBER CM 
		,TBL_EXP_USER U
		,TBL_EXP_PAYMENT P
		WHERE 1=1
		AND A.CONTRACT_ID	= #{CONTRACT_ID}
		AND A.USER_ID		= CM.USER_ID
		AND A.CONTRACT_ID   = CM.CONTRACT_ID 
		AND A.RELATION_TYPE = CM.RELATION_TYPE
		AND CM.RELATION_TYPE= P.RELATION_TYPE(+) 
		AND A.USER_ID 		= U.USER_ID 
		AND A.CONTRACT_ID 	= P.CONTRACT_ID(+)
		AND #{RESULT_ID}	= P.RESULT_ID(+)
		AND A.USER_ID		= P.USER_ID(+)
		AND P.USE_YN(+)		= 'Y'
		AND P.DEL_YN(+)		= 'N'
		AND CM.USE_YN		= 'Y'
		AND CM.DEL_YN		= 'N'
		ORDER BY A.PAYMENT_ID	
	</select>	
	
	<select id="getPayId" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	result.getPayId
			수수료 PAY ID 조회
		*/
	 
		WITH CMU AS(
			<include refid="cmUsers"/>
		)
       <choose>
           <when test="RELATION_TYPE != null and RELATION_TYPE.equals('EXECUTE')">
           
			SELECT CMU.USER_ID, CMU.USER_NM, P.EXEC_PAY_ID AS PAY_ID , P.RATE , 'EXECUTE' RELATION_TYPE
			FROM TBL_EXP_EXEC_PAY  P
			,TBL_EXP_CONTRACT C
			,CMU
			WHERE C.CONTRACT_ID		= #{CONTRACT_ID}
			AND P.CONTRACT_TYPE		= TRIM(C.CONTRACT_TYPE)
			AND CMU.RELATION_TYPE	= 'EXECUTE'
			AND CMU.USER_ID 		= #{USER_ID}
			AND P.GRADE 			= CMU.GRADE

           </when>
           <when test="RELATION_TYPE != null and (RELATION_TYPE == 'SALES' or RELATION_TYPE == 'COWORK')">
            
			SELECT CMU.USER_ID, CMU.USER_NM, P.SALES_PAY_ID AS PAY_ID , 
			DECODE( CMU.RELATION_TYPE, 'COWORK',CMU.COWORK_RATE,  P.RATE ) RATE , #{RELATION_TYPE} RELATION_TYPE
			FROM TBL_EXP_SALES_PAY P
			,TBL_EXP_CONTRACT C
			,CMU
			WHERE C.CONTRACT_ID 	= #{CONTRACT_ID}
			AND P.CONTRACT_TYPE 	= TRIM(C.CONTRACT_TYPE)
			AND CMU.RELATION_TYPE 	= #{RELATION_TYPE}
			AND CMU.USER_ID 		= #{USER_ID}
			AND P.GRADE 			= CMU.GRADE
			AND P.SALES_TYPE  		= CMU.SALES_TYPE

           </when>
           <when test="RELATION_TYPE != null and RELATION_TYPE.equals('SUGGESTER')">
           
			SELECT CMU.USER_ID, CMU.USER_NM, '100' AS PAY_ID , 5 AS RATE , 'SUGGESTER' RELATION_TYPE
			FROM 
			TBL_EXP_CONTRACT C
			,CMU
			WHERE C.CONTRACT_ID		= #{CONTRACT_ID}
			AND CMU.RELATION_TYPE	= 'SUGGESTER'
			AND CMU.USER_ID 		= #{USER_ID}
           </when>
            
           
       </choose>
	
	</select>	
		
	<select id="getCostList" resultType="java.util.HashMap" flushCache="true"  useCache="false">
		/*	result.getCostList
			비용 내역(실적비용) 리스트 조회 
		*/
	 
		SELECT CONTRACT_ID
		, RESULT_ID
		, COST_ID
		, COST_NM
		, COST_DESC
		, COST_PRICE
		, ( COST_PRICE/11 ) * 10 AS COST_SUPP_PRICE
		, ( COST_PRICE/11 ) *  1 AS COST_TAX_PRICE
		, USE_YN
		, DEL_YN
		, UPDATE_USER
		, UPDATE_DATE
		, TAX_FREE_YN
		FROM TBL_EXP_COST
		WHERE 1=1
		AND CONTRACT_ID = #{CONTRACT_ID}
		AND RESULT_ID	= #{RESULT_ID}
		AND USE_YN		= 'Y'
		AND DEL_YN		= 'N'
		ORDER BY COST_ID  
	</select>	
	
	<update id="updateCostItem" parameterType="java.util.HashMap"  flushCache="true" >
		/*	result.updateCostItem
			비용(실적비용) 저장
		*/
		MERGE INTO TBL_EXP_COST T
		USING (
		
		  SELECT #{CONTRACT_ID}				AS CONTRACT_ID,
		         #{RESULT_ID} 				AS RESULT_ID,
		         #{COST_ID} 				AS COST_ID,
		         #{COST_NM} 				AS COST_NM,
		         #{COST_DESC} 				AS COST_DESC,
		         TO_NUMBER(REPLACE(#{COST_PRICE},',',''))	
		         							AS COST_PRICE,
		         'Y'	 					AS USE_YN,
		         'N' 						AS DEL_YN,
		         #{sessionVo.userId}		AS UPDATE_USER,
		         #{TAX_FREE_YN}				AS TAX_FREE_YN
		  FROM dual
		  
		) S
		ON (T.CONTRACT_ID	= S.CONTRACT_ID 
		AND T.RESULT_ID		= S.RESULT_ID 
		AND T.COST_ID		= S.COST_ID 
		)
		WHEN MATCHED THEN
		  UPDATE SET
		         T.COST_NM 			= S.COST_NM,
		         T.COST_DESC 		= S.COST_DESC,
		         T.COST_PRICE 		= S.COST_PRICE,
		         T.DEL_YN			= S.DEL_YN,
		         T.UPDATE_USER		= S.UPDATE_USER,
		         T.UPDATE_DATE		= GET_KRDT(SYSDATE),
		         T.TAX_FREE_YN		= S.TAX_FREE_YN
		WHEN NOT MATCHED THEN 
    		INSERT (  CONTRACT_ID,   RESULT_ID,   COST_ID,   COST_NM,   COST_DESC,   COST_PRICE, USE_YN, DEL_YN,   UPDATE_USER, UPDATE_DATE, TAX_FREE_YN)
   			VALUES (S.CONTRACT_ID, S.RESULT_ID, S.COST_ID, S.COST_NM, S.COST_DESC, S.COST_PRICE,    'Y',    'N', S.UPDATE_USER, GET_KRDT(SYSDATE) , S.TAX_FREE_YN )

	</update>
	
	<delete id="deleteCostItem" parameterType="java.util.HashMap"  flushCache="true" >
		/*	result.deleteCostItem
			비용(실적비용) 삭제
		*/
		UPDATE TBL_EXP_COST
		SET USE_YN = 'N'
		,	DEL_YN = 'Y'
		,	UPDATE_USER = #{sessionVo.userId}
		,   UPDATE_DATE = GET_KRDT(SYSDATE)
		WHERE CONTRACT_ID	= #{CONTRACT_ID}
		AND RESULT_ID	 	= #{RESULT_ID}
		AND COST_ID	 		= #{COST_ID}
	</delete>
	
	<update id="updatePaymentItem" parameterType="java.util.HashMap"  flushCache="true" >
		/*	result.updatePaymentItem
			실적 수당 저장
		*/
		DECLARE
        	v_result_id TBL_EXP_PAYMENT.RESULT_ID%TYPE;
		BEGIN 

			MERGE INTO TBL_EXP_PAYMENT T
			USING (
			
			  SELECT #{CONTRACT_ID}				AS CONTRACT_ID,
			         #{USER_ID} 				AS USER_ID,
			         #{RESULT_ID} 				AS RESULT_ID,
			         TO_NUMBER(#{PAYMENT_ID})	AS PAYMENT_ID,
			         #{PAYMENT} 				AS PAYMENT,
			         #{RELATION_TYPE} 			AS RELATION_TYPE,
			         TO_CHAR(#{PAY_ID})			AS PAY_ID,
			         #{RATE} 					AS RATE,
			         'Y'	 					AS USE_YN,
			         'N' 						AS DEL_YN,
			         #{sessionVo.userId}		AS UPDATE_USER
			  FROM dual
			  
			) S
			ON (T.CONTRACT_ID	= S.CONTRACT_ID 
			AND T.USER_ID		= S.USER_ID 
			AND T.RESULT_ID		= S.RESULT_ID 
			AND T.RELATION_TYPE = S.RELATION_TYPE 
			)
			WHEN MATCHED THEN
			  UPDATE SET
			         T.PAYMENT 			= S.PAYMENT,	
			         T.PAY_ID			= S.PAY_ID,
			         T.RATE				= S.RATE,
			         T.USE_YN			= S.USE_YN,
			         T.DEL_YN			= S.DEL_YN,
			         T.UPDATE_USER		= S.UPDATE_USER,
			         T.UPDATE_DATE		= GET_KRDT(SYSDATE)
			WHEN NOT MATCHED THEN 
	    		INSERT (  CONTRACT_ID,   USER_ID,   RESULT_ID,   PAYMENT,   PAYMENT_ID,	  RELATION_TYPE,  PAY_ID,   RATE,   USE_YN,   DEL_YN,   UPDATE_USER, UPDATE_DATE)
	   			VALUES (S.CONTRACT_ID, S.USER_ID, S.RESULT_ID, S.PAYMENT, S.PAYMENT_ID,	S.RELATION_TYPE,S.PAY_ID, S.RATE, S.USE_YN, S.DEL_YN, S.UPDATE_USER, GET_KRDT(SYSDATE))
	   		;
   		
		   	BEGIN

				/* 보고 년월일이 08월이면, 실적테이블에서 08월 입력분에 대해서, 수수료테이블에 Y로 친다. 
					custDashboard.updateBuyerConsultingAppState 의 쿼리와 다름.
				*/ 
				SELECT DISTINCT RESULT_ID
		        INTO v_result_id
				FROM(
					SELECT 
					R.* 
					FROM TBL_EXP_BUYER_CONSULTING CS, TBL_EXP_RESULT R , TBL_EXP_CONTRACT C
					WHERE 1=1
					AND CS.APPROVAL_STATE = 'COMPLETE' AND CS.DEL_YN = 'N'
					AND C.CONTRACT_ID	= #{CONTRACT_ID}
					AND R.RESULT_ID		= #{RESULT_ID}
					AND CS.CONTRACT_ID 	= R.CONTRACT_ID 
					AND CS.CONTRACT_ID 	= C.CONTRACT_ID AND C.CONTRACT_TYPE = 'MONTHLY'
					AND R.USE_YN = 'Y' AND R.DEL_YN = 'N'
					AND TO_CHAR(R.RESULT_DATE,'YYYY-MM') = CS.REPORT_YEAR_MONTH
				);	
			
			    EXCEPTION
		        WHEN NO_DATA_FOUND THEN
	            v_result_id := NULL;
			END;
		
			IF v_result_id IS NOT NULL THEN
			        UPDATE TBL_EXP_RESULT
			        SET IS_PAYABLE = 'Y'
			        WHERE RESULT_ID = v_result_id;
			END IF;			
					
		END ;	
	</update>
	
	<delete id="deletePaymentItem" parameterType="java.util.HashMap"  flushCache="true" >
		/*	result.deletePaymentItem
			실적 수당 삭제
		*/
		UPDATE TBL_EXP_PAYMENT
		SET USE_YN = 'N'
		,	DEL_YN = 'Y'
		,	UPDATE_USER = #{sessionVo.userId}
		,	UPDATE_DATE = GET_KRDT(SYSDATE)
		WHERE CONTRACT_ID	= #{CONTRACT_ID}
		AND USER_ID	 		= #{USER_ID}
		AND RESULT_ID	 	= #{RESULT_ID}
		AND PAYMENT_ID	 	= #{PAYMENT_ID}
	</delete>
	
	<select id="deleteResultTabSeries" statementType="CALLABLE" parameterType="java.util.HashMap" flushCache="true">
	    <!-- result.deleteResultTabSeries
	         실적 SERIES 테이블 삭제
	    -->
	    { CALL
		    DECLARE
		        p_CONTRACT_ID	VARCHAR2(30);
		        p_RESULT_ID		VARCHAR2(30);
		    BEGIN
		    
		        p_CONTRACT_ID := #{CONTRACT_ID};
		        p_RESULT_ID   := #{RESULT_ID};
		    
		        UPDATE TBL_EXP_RESULT
		        SET USE_YN = 'N'
		        ,   DEL_YN = 'Y'
				,	UPDATE_USER = #{sessionVo.userId}
				,	UPDATE_DATE = GET_KRDT(SYSDATE)
		        WHERE CONTRACT_ID = p_CONTRACT_ID
		        AND RESULT_ID     = p_RESULT_ID
		        ;
		        
		        UPDATE TBL_EXP_PAYMENT
		        SET USE_YN = 'N'
		        ,   DEL_YN = 'Y'
				,	UPDATE_USER = #{sessionVo.userId}
				,	UPDATE_DATE = GET_KRDT(SYSDATE)
		        WHERE CONTRACT_ID = p_CONTRACT_ID
		        AND RESULT_ID     = p_RESULT_ID
		        ;
		        
		        UPDATE TBL_EXP_COST
		        SET USE_YN = 'N'
		        ,   DEL_YN = 'Y'
				,	UPDATE_USER = #{sessionVo.userId}
				,	UPDATE_DATE = GET_KRDT(SYSDATE)
		        WHERE CONTRACT_ID = p_CONTRACT_ID
		        AND RESULT_ID     = p_RESULT_ID
		        ;
		        
		        COMMIT;
		    END
	    }
	</select>

</mapper>
